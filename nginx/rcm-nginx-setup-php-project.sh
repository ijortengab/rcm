#!/bin/bash

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --certificate-name=*) certificate_name="${1#*=}"; shift ;;
        --certificate-name) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then certificate_name="$2"; shift; fi; shift ;;
        --container=*) container="${1#*=}"; shift ;;
        --container) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then container="$2"; shift; fi; shift ;;
        --fast) fast=1; shift ;;
        --hello) index_php=3; shift ;;
        --index-php=*) index_php="${1#*=}"; shift ;;
        --index-php) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then index_php="$2"; shift; else index_php=1; fi; shift ;;
        --no-auto-add-group) no_auto_add_group=1; shift ;;
        --phpinfo) index_php=2; shift ;;
        --phpvariables) index_php=4; shift ;;
        --php-fpm-config=*) php_fpm_config+=("${1#*=}"); shift ;;
        --php-fpm-config) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then php_fpm_config+=("$2"); shift; fi; shift ;;
        --php-fpm-section=*) php_fpm_section="${1#*=}"; shift ;;
        --php-fpm-section) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then php_fpm_section="$2"; shift; fi; shift ;;
        --php-fpm-user=*) php_fpm_user="${1#*=}"; shift ;;
        --php-fpm-user) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then php_fpm_user="$2"; shift; fi; shift ;;
        --php-version=*) php_version="${1#*=}"; shift ;;
        --php-version) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then php_version="$2"; shift; fi; shift ;;
        --prefix=*) prefix="${1#*=}"; shift ;;
        --prefix) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then prefix="$2"; shift; fi; shift ;;
        --root=*) root="${1#*=}"; shift ;;
        --root) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then root="$2"; shift; fi; shift ;;
        --url=*) url="${1#*=}"; shift ;;
        --url) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then url="$2"; shift; fi; shift ;;
        --with-certbot-obtain) certbot_obtain=1; shift ;;
        --without-certbot-obtain) certbot_obtain=0; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }
____() { echo >&2; [ -n "$RCM_DELAY" ] && sleep "$RCM_DELAY"; }

# Define variables and constants.
RCM_DELAY=${RCM_DELAY:=.5}; [ -n "$fast" ] && unset RCM_DELAY
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '
PHP_FPM_POOL_DIRECTORY=${PHP_FPM_POOL_DIRECTORY:=/etc/php/[php-version]/fpm/pool.d}

# Functions.
printVersion() {
    echo '0.17.1'
}
printHelp() {
    title RCM Nginx Setup
    _ 'Variation '; yellow PHP-FPM Project; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    # Populate variable $single_line and $multi_line.
    unset count
    declare -i count
    count=0
    single_line=
    multi_line=
    while read line;do
        if [ -d /etc/php/$line/fpm ];then
            if [ $count -gt 0 ];then
                single_line+=", "
            fi
            count+=1
            single_line+="[${count}]"
            multi_line+=$'\n''        '"[${count}]: "${line}
        fi
    done <<< `ls /etc/php/`
    if [ -n "$single_line" ];then
        # single_line=" Available values: ${single_line}, or other."
        single_line=" Available values: ${single_line}."
    fi
    if [ -n "$multi_line" ];then
        multi_line="$multi_line"
    fi
    # Populate variable $users.
    users=`cut -d: -f1 /etc/passwd | while read line; do [ -d /home/$line ] && echo " ${line}"; done | tr $'\n' ','`
    nginx_user=
    conf_nginx=`command -v nginx > /dev/null && nginx -V 2>&1 | grep -o -P -- '--conf-path=\K(\S+)'`
    if [ -f "$conf_nginx" ];then
        nginx_user=`grep -o -P '^user\s+\K([^;]+)' "$conf_nginx"`
    fi
    [ -n "$nginx_user" ] && { nginx_user=" ${nginx_user},"; }
    [ -n "$users" ] && users=" Available values:${nginx_user}${users}."
    cat << EOF
Usage: rcm-nginx-setup-php-project.sh [options]

Options:
   --url *
        Set the URL. The value can be public or private domain, or URL.
        Example: \`example.org\`, \`example.org/path/to/drupal/\`, or \`https://sub.example.org:8080/\`.
        Special top level domain such us .local, .example, etc will pretend as private domain.
   --php-version *
        Set the version of PHP FPM.${single_line}${multi_line}
   --php-fpm-user
        Set the Unix user that used by PHP FPM.
        Default value is the user that used by web server (the common name is www-data).
        If the user does not exists, it will be autocreate as reguler user.${users}
   --php-fpm-section *
        Set the PHP-FPM section.
        Create new PHP FPM section with \`rcm php-fpm-setup-project-config\`.
        Values available from command: rcm-nginx-setup-php-project(section-suggestion [--php-version] [--php-fpm-user]).
   --root
        Set the web root pointing the URL. If empty, it will use the default value of
        \`--prefix\` and \`--container\`.
   --index-php ^
        Auto create index.php file.
        Can have value. The value is string that will be printed.
        Example: --index-php="Foo bar" will create contents \`<?= "Foo bar"; ?>\`.

Other options (For expert only):
   --prefix
        Set prefix directory for project.
        Default to home directory of --php-fpm-user. or /usr/local/share.
   --container
        Set the container directory for all projects.
        Available value: public_html, or other.
        Default to public_html --php-fpm-user is reguler user.
   --phpinfo ^
        Shortcut of \`--index-php=2\`.
        It will create index.php file with contents \`<?php phpinfo(); ?>\`.
   --hello ^
        Shortcut of \`--index-php=3\`.
        It will create index.php file with contents \`<?= 'Hello World'; ?>\`.
   --phpvariables ^
        Shortcut of \`--index-php=4\`.
        It will create index.php file with contents \`<pre><?php print_r(\$_SERVER); ?></pre>\`.
   --php-fpm-config
        Additional PHP-FPM Configuration inside pool directory.
        Available value: [1], [2], [3], [4], [5], [6], [7], or other.
        [1]: pm=ondemand
        [2]: php_flag[display_errors]=on
        [3]: php_value[max_execution_time]=300
        [4]: php_admin_value[memory_limit]=256M
        [5]: php_admin_value[upload_max_filesize]=25M
        [6]: php_admin_value[post_max_size]=1024M
        [7]: php_admin_flag[log_errors]=on
        Multivalue.
   --without-certbot-obtain ^
        The dafault value is \`--with-certbot-obtain\`, it will check the value of
        \`--url\`. The URL that contains https scheme is will automatically obtain.
        The URL that not contains http or https, it means using https excepts special top level domain such us .local, .example, etc.
        Use this option to force certbot to use existing certificate if the \`--url\`
        contains https.
   --certificate-name
        Use the existing certificate name that issued by Let's encrypt or set a
        new name of certificate that to be obtained.

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.

Dependency:
   curl
   rcm-php-fpm-setup-project-config
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Command.
command="$1"; shift
if [ -n "$command" ];then
    case "$command" in
        --|get-root|section-suggestion) ;;
        *) echo -e "\e[91m""Command ${command} is unknown.""\e[39m"; exit 1
    esac
fi

# Functions.
Rcm_parse_url() {
    # Reset
    PHP_URL_SCHEME=
    PHP_URL_HOST=
    PHP_URL_PORT=
    PHP_URL_USER=
    PHP_URL_PASS=
    PHP_URL_PATH=
    PHP_URL_QUERY=
    PHP_URL_FRAGMENT=
    PHP_URL_SCHEME="$(echo "$1" | grep :// | sed -e's,^\(.*\)://.*,\1,g')"
    _PHP_URL_SCHEME_SLASH="${PHP_URL_SCHEME}://"
    _PHP_URL_SCHEME_REVERSE="$(echo ${1/${_PHP_URL_SCHEME_SLASH}/})"
    if grep -q '#' <<< "$_PHP_URL_SCHEME_REVERSE";then
        PHP_URL_FRAGMENT=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d# -f2)
        _PHP_URL_SCHEME_REVERSE=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d# -f1)
    fi
    if grep -q '\?' <<< "$_PHP_URL_SCHEME_REVERSE";then
        PHP_URL_QUERY=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d? -f2)
        _PHP_URL_SCHEME_REVERSE=$(echo $_PHP_URL_SCHEME_REVERSE | cut -d? -f1)
    fi
    _PHP_URL_USER_PASS="$(echo $_PHP_URL_SCHEME_REVERSE | grep @ | cut -d@ -f1)"
    PHP_URL_PASS=`echo $_PHP_URL_USER_PASS | grep : | cut -d: -f2`
    if [ -n "$PHP_URL_PASS" ]; then
        PHP_URL_USER=`echo $_PHP_URL_USER_PASS | grep : | cut -d: -f1`
    else
        PHP_URL_USER=$_PHP_URL_USER_PASS
    fi
    _PHP_URL_HOST_PORT="$(echo ${_PHP_URL_SCHEME_REVERSE/$_PHP_URL_USER_PASS@/} | cut -d/ -f1)"
    PHP_URL_HOST="$(echo $_PHP_URL_HOST_PORT | sed -e 's,:.*,,g')"
    if grep -q -E ':[0-9]+$' <<< "$_PHP_URL_HOST_PORT";then
        PHP_URL_PORT="$(echo $_PHP_URL_HOST_PORT | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
    fi
    _PHP_URL_HOST_PORT_LENGTH=${#_PHP_URL_HOST_PORT}
    _LENGTH="$_PHP_URL_HOST_PORT_LENGTH"
    if [ -n "$_PHP_URL_USER_PASS" ];then
        _PHP_URL_USER_PASS_LENGTH=${#_PHP_URL_USER_PASS}
        _LENGTH=$((_LENGTH + 1 + _PHP_URL_USER_PASS_LENGTH))
    fi
    PHP_URL_PATH="${_PHP_URL_SCHEME_REVERSE:$_LENGTH}"

    # Debug
    # e '"$PHP_URL_SCHEME"' "$PHP_URL_SCHEME"; _.
    # e '"$PHP_URL_HOST"' "$PHP_URL_HOST"; _.
    # e '"$PHP_URL_PORT"' "$PHP_URL_PORT"; _.
    # e '"$PHP_URL_USER"' "$PHP_URL_USER"; _.
    # e '"$PHP_URL_PASS"' "$PHP_URL_PASS"; _.
    # e '"$PHP_URL_PATH"' "$PHP_URL_PATH"; _.
    # e '"$PHP_URL_QUERY"' "$PHP_URL_QUERY"; _.
    # e '"$PHP_URL_FRAGMENT"' "$PHP_URL_FRAGMENT"; _.
}
ArraySearch() {
    local index match="$1"
    local source=("${!2}")
    for index in "${!source[@]}"; do
       if [[ "${source[$index]}" == "${match}" ]]; then
           _return=$index; return 0
       fi
    done
    return 1
}
ArrayPop() {
    local index
    local source=("${!1}")
    # declare -i last_index
    local last_index=${#source[@]}
    last_index=$((last_index - 1))
    _return=()
    for (( index=0; index < "$last_index" ; index++ )); do
        _return+=("${source[$index]}")
    done
    return="${source[-1]}"
}
adjustNginxConfigRoot() {
    # global modified $nginx_config_root
    local url_path=$1; shift;
    if [ -z "$url_path" ];then
        # not modified.
        return
    fi
    local url_path_clean=$(echo "$url_path" | sed -E 's|(^/+\|/+$)||g')
    if [[ ! "$url_path_clean" =~ / ]];then
        # not modified.
        return
    fi
    # Explode by space.
    # read -ra array -d '' <<< "$string"
    # Explode by slash.
    IFS='/' read -ra array <<< "$url_path_clean"
    # for each in "${array[@]}"; do echo "_${each}_"; done;
    ArrayPop array[@]
    array=("${_return[@]}"); unset _return
    for each in "${array[@]}"; do nginx_config_root+="/${each}.d"; done;
}
isDirExists() {
    # global used:
    # global modified: found, notfound
    # function used: __
    found=
    notfound=
    if [ -d "$1" ];then
        __ Direktori '`'$(basename "$1")'`' ditemukan.
        found=1
    else
        __ Direktori '`'$(basename "$1")'`' tidak ditemukan.
        notfound=1
    fi
}
dirMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -d "$1" ];then
        __; green Direktori '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red Direktori '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}
link_symbolic_dir() {
    local source="$1"
    local target="$2"
    local sudo="$3"
    local source_mode="$4"
    local create
    # Trim trailing slash.
    source=$(echo "$source" | sed -E 's|/+$||g')
    target=$(echo "$target" | sed -E 's|/+$||g')
    [ "$sudo" == - ] && sudo=
    [ "$source_mode" == absolute ] || source_mode=
    [ -e "$source" ] || { error Source not exist: $source.; x; }
    [ -d "$source" ] || { error Source exists but not directory: $source.; x; }
    [ -n "$target" ] || { error Target not defined.; x; }
    [[ $(type -t backupFile) == function ]] || { error Function backupFile not found.; x; }
    [[ $(type -t backupDir) == function ]] || { error Function backupDir not found.; x; }
    chapter Membuat symbolic link directory.
    __ source: '`'$source'`'
    __ target: '`'$target'`'
    if [ -d "$target" ];then
        if [ -h "$target" ];then
            __ Path target saat ini sudah merupakan directory symbolic link: '`'$target'`'
            local _readlink=$(readlink "$target")
            __; magenta readlink "$target"; _.
            _ $_readlink; _.
            if [[ "$_readlink" =~ ^[^/\.] ]];then
                local target_parent=$(dirname "$target")
                local _dereference="${target_parent}/${_readlink}"
            elif [[ "$_readlink" =~ ^[\.] ]];then
                local target_parent=$(dirname "$target")
                local _dereference="${target_parent}/${_readlink}"
                _dereference=$(realpath -s "$_dereference")
            else
                _dereference="$_readlink"
            fi
            __; _, Mengecek apakah link merujuk ke '`'$source'`':' '
            if [[ "$source" == "$_dereference" ]];then
                _, merujuk.; _.
            else
                _, tidak merujuk.; _.
                __ Melakukan backup.
                backupFile move "$target"
                create=1
            fi
        else
            __ Melakukan backup regular direktori: '`'"$target"'`'.
            backupDir "$target"
            create=1
        fi
    elif [ -f "$target" ];then
        __ Melakukan backup file: '`'"$target"'`'.
        backupFile move "$target"
        create=1
    else
        create=1
    fi
    if [ -n "$create" ];then
        __ Membuat symbolic link: '`'$target'`'.
        local target_parent=$(dirname "$target")
        if [ -n "$sudo" ];then
            code sudo -u '"'$sudo'"' mkdir -p '"'$target_parent'"'
            sudo -u "$sudo" mkdir -p "$target_parent"
        else
            code mkdir -p "$target_parent"
            mkdir -p "$target_parent"
        fi
        if [ -z "$source_mode" ];then
            source=$(realpath -s --relative-to="$target_parent" "$source")
        fi
        if [ -n "$sudo" ];then
            code sudo -u '"'$sudo'"' ln -s '"'$source'"' '"'$target'"'
            sudo -u "$sudo" ln -s "$source" "$target"
        else
            code ln -s '"'$source'"' '"'$target'"'
            ln -s "$source" "$target"
        fi
        if [ $? -eq 0 ];then
            __; green Symbolic link berhasil dibuat.; _.
        else
            __; red Symbolic link gagal dibuat.; x
        fi
    fi
    ____
}
backupFile() {
    local mode="$1"
    local oldpath="$2" i newpath
    local target_dir="$3"
    i=1
    dirname=$(dirname "$oldpath")
    basename=$(basename "$oldpath")
    if [ -n "$target_dir" ];then
        case "$target_dir" in
            parent) dirname=$(dirname "$dirname") ;;
            *) dirname="$target_dir"
        esac
    fi
    [ -d "$dirname" ] || { echo 'Directory is not exists.' >&2; return 1; }
    newpath="${dirname}/${basename}.${i}"
    if [ -f "$newpath" ]; then
        let i++
        newpath="${dirname}/${basename}.${i}"
        while [ -f "$newpath" ] ; do
            let i++
            newpath="${dirname}/${basename}.${i}"
        done
    fi
    case $mode in
        move)
            mv "$oldpath" "$newpath" ;;
        copy)
            local user=$(stat -c "%U" "$oldpath")
            local group=$(stat -c "%G" "$oldpath")
            cp "$oldpath" "$newpath"
            chown ${user}:${group} "$newpath"
    esac
}
backupDir() {
    local oldpath="$1" i newpath
    # Trim trailing slash.
    oldpath=$(echo "$oldpath" | sed -E 's|/+$||g')
    i=1
    newpath="${oldpath}.${i}"
    if [ -e "$newpath" ]; then
        let i++
        newpath="${oldpath}.${i}"
        while [ -e "$newpath" ] ; do
            let i++
            newpath="${oldpath}.${i}"
        done
    fi
    mv "$oldpath" "$newpath"
}
resolve_relative_path() {
    if [ -d "$1" ];then
        cd "$1" || return 1
        pwd
    elif [ -e "$1" ];then
        if [ ! "${1%/*}" = "$1" ]; then
            cd "${1%/*}" || return 1
        fi
        echo "$(pwd)/${1##*/}"
    else
        return 1
    fi
}
isFileExists() {
    # global used:
    # global modified: found, notfound
    # function used: __
    found=
    notfound=
    if [ -f "$1" ];then
        __ File '`'$(basename "$1")'`' ditemukan.
        found=1
    else
        __ File '`'$(basename "$1")'`' tidak ditemukan.
        notfound=1
    fi
}
command-section-suggestion() {
    local php_version=$1
    local php_fpm_user=$2
    if [ -z "$php_version" ];then
        error PHP Version is required.; x
    fi
    # echo php_version "$php_version"
    # echo php_fpm_user "$php_fpm_user"

    find='[php-version]'
    replace="$php_version"
    PHP_FPM_POOL_DIRECTORY="${PHP_FPM_POOL_DIRECTORY/"$find"/"$replace"}"
    if [ ! -d "$PHP_FPM_POOL_DIRECTORY" ];then
        error PHP Version is not exists in system.; x
    fi
    while read file; do
        grep -h -E '^\s*\[[^]]+]\s*$' "$file" | sed -E 's,\[(.*)\],\1,' | sort
    done <<< `ls "$PHP_FPM_POOL_DIRECTORY"/*.conf`
}

# Execute command.
if [[ -n "$command" && $(type -t "command-${command}") == function ]];then
    command-${command} "$@"
    exit 0
fi

# Title.
title rcm-nginx-setup-php-project
____

[ "$EUID" -ne 0 ] && { error This script needs to be run with superuser privileges.; x; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { error Unable to proceed, command not found: '`'`cut -d: -f1 <<< "${line}"`'`'.; x; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Functions.
backupFile() {
    local mode="$1"
    local oldpath="$2" i newpath
    local target_dir="$3"
    i=1
    dirname=$(dirname "$oldpath")
    basename=$(basename "$oldpath")
    if [ -n "$target_dir" ];then
        case "$target_dir" in
            parent) dirname=$(dirname "$dirname") ;;
            *) dirname="$target_dir"
        esac
    fi
    [ -d "$dirname" ] || { echo 'Directory is not exists.' >&2; return 1; }
    newpath="${dirname}/${basename}.${i}"
    if [ -f "$newpath" ]; then
        let i++
        newpath="${dirname}/${basename}.${i}"
        while [ -f "$newpath" ] ; do
            let i++
            newpath="${dirname}/${basename}.${i}"
        done
    fi
    case $mode in
        move)
            mv "$oldpath" "$newpath" ;;
        copy)
            local user=$(stat -c "%U" "$oldpath")
            local group=$(stat -c "%G" "$oldpath")
            cp "$oldpath" "$newpath"
            chown ${user}:${group} "$newpath"
    esac
}
fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}

# Require, validate, and populate value.
chapter Dump variable.
[ -n "$fast" ] && isfast=' --fast' || isfast=''
code no_auto_add_group="$no_auto_add_group"
is_wsl=
if [ -f /proc/sys/kernel/osrelease ];then
    read osrelease </proc/sys/kernel/osrelease
    if [[ "$osrelease" =~ microsoft || "$osrelease" =~ Microsoft ]];then
        is_wsl=1
    fi
fi
code 'is_wsl="'$is_wsl'"'
if [ -z "$url" ];then
    error "Argument --url required."; x
fi
code 'url="'$url'"'
if [ -z "$php_version" ];then
    error "Argument --php-version required."; x
fi
code php_version="$php_version"
tld_special=(example test onion invalid local localhost alt)
is_tld_special=
if [ -n "$url" ];then
    Rcm_parse_url "$url"
    if [ -z "$PHP_URL_HOST" ];then
        error Argument --url is not valid: '`'"$url"'`'.; x
    fi
    [ -n "$PHP_URL_SCHEME" ] && url_scheme="$PHP_URL_SCHEME" || url_scheme=https
    if [ -z "$PHP_URL_PORT" ];then
        case "$url_scheme" in
            http) url_port=80;;
            https) url_port=443;;
        esac
    else
        url_port="$PHP_URL_PORT"
    fi
    url_host="$PHP_URL_HOST"
    url_path="$PHP_URL_PATH"
    # Modify variable url, auto add scheme.
    url_path_clean_trailing=$(echo "$url_path" | sed -E 's|/+$||g')
    # Modify variable url, auto trim trailing slash, auto add port.
    tld="${url_host##*.}"
    if ArraySearch "$tld" tld_special[@];then
        url_scheme=http
        if [ -z "$PHP_URL_PORT" ];then
            url_port=80
        fi
        is_tld_special=1
    fi
    _url_port=
    if [ -n "$url_port" ];then
        if [[ "$url_scheme" == https && "$url_port" == 443 ]];then
            _url_port=
        elif [[ "$url_scheme" == http && "$url_port" == 80 ]];then
            _url_port=
        else
            _url_port=":${url_port}"
        fi
    fi
    url="${url_scheme}://${url_host}${_url_port}${url_path_clean_trailing}"
fi
code 'url="'$url'"'
if [ -n "$is_wsl" ];then
    # Jika mesin menggunakan WSL2, maka tambahkan max_execution_time (waktu proses)
    php_fpm_config=(pm=ondemand php_value[max_execution_time]=60 "${php_fpm_config[@]}")
fi
is_config_line=
is_config_line_array=()
# Dump array dengan single quote.
e; magenta 'php_fpm_config=('
first=1
for each in "${php_fpm_config[@]}";do
    if [ -n "$first" ];then
        magenta "'""$each""'"; first=
    else
        magenta " '""$each""'";
    fi
    [[ "$each" =~ ' ' ]] && is_config_line+=" --config-line='${each}'" || is_config_line+=" --config-line=${each}"
    is_config_line_array+=("--config-line=${each}")
done
magenta ')'; _.
code 'certificate_name="'$certificate_name
if [ -z "$php_fpm_section" ];then
    error "Argument --php-fpm-section required."; x
fi
code 'php_fpm_section="'$php_fpm_section'"'
[ -z "$certbot_obtain" ] && certbot_obtain=1
[ "$certbot_obtain" == 0 ] && certbot_obtain=
code 'certbot_obtain="'$certbot_obtain'"'
if [ -n "$is_tld_special" ];then
    certbot_obtain=
fi
code 'certbot_obtain="'$certbot_obtain'"'
[ -n "$certbot_obtain" ] && is_certbot_obtain=' --with-certbot-obtain' || is_certbot_obtain=' --without-certbot-obtain'
code 'root="'$root'"'
code 'prefix="'$prefix'"'
code 'container="'$container'"'
if [ -n "$root" ];then
    if [ -d "$root" ];then
        if [ ! "${root:0:1}" == / ];then
            root=$(resolve_relative_path "$root")
        fi
    else
        error Directory root is not exists; x
    fi
    # Input dari user selesai, sekarang kembalikan ke semula.
    # root adalah prefix.
    prefix="$root"
    container=.
else
    # Verifikasi prefix dari user.
    if [ -n "$prefix" ];then
        if [ -d "$prefix" ];then
            if [ ! "${prefix:0:1}" == / ];then
                prefix=$(resolve_relative_path "$prefix")
            fi
        else
            error Directory prefix is not exists; x
        fi
    fi
fi
code 'prefix="'$prefix'"'
code 'index_php="'$index_php'"'
____

INDENT+="    " \
rcm-php-setup-adjust-cli-version $isfast \
    --php-version="$php_version" \
    ; [ ! $? -eq 0 ] && x

# Code below from
# rcm-drupal-setup-wrapper-nginx-virtual-host-autocreate-php-multiple-root.sh
chapter Dump variable.
[ -n "$fast" ] && isfast=' --fast' || isfast=''
if [ -z "$url_scheme" ];then
    error "Argument --url-scheme required."; x
fi
if [ -z "$url_host" ];then
    error "Argument --url-host required."; x
fi
if [ -z "$url_port" ];then
    error "Argument --url-port required."; x
fi
if [[ "$url_path" == '/' ]];then
    url_path=
fi
if [ -n "$url_path" ];then
    # Trim leading and trailing slash.
    url_path_clean=$(echo "$url_path" | sed -E 's|(^/+\|/+$)||g')
    url_path_clean_trailing=$(echo "$url_path" | sed -E 's|/+$||g')
    # Must leading with slash.
    # Karena akan digunakan pada nginx configuration.
    _url_path_correct="/${url_path_clean}"
    if [ ! "$url_path_clean_trailing" == "$_url_path_correct" ];then
        error "Argument --url-path not valid."; x
    fi
fi
code 'url_scheme="'$url_scheme'"'
code 'url_host="'$url_host'"'
code 'url_port="'$url_port'"'
code 'url_path="'$url_path'"'
code 'url_path_clean="'$url_path_clean'"'
if [ -z "$php_version" ];then
    error "Argument --php-version required."; x
fi
code 'php_version="'$php_version'"'
rcm_nginx_reload=
code 'certificate_name="'$certificate_name'"'
code 'is_certbot_obtain="'$is_certbot_obtain'"'
____

chapter Populate variables.
nginx_user=
conf_nginx=`command -v nginx > /dev/null && command -v nginx > /dev/null && nginx -V 2>&1 | grep -o -P -- '--conf-path=\K(\S+)'`
if [ -f "$conf_nginx" ];then
    nginx_user=`grep -o -P '^user\s+\K([^;]+)' "$conf_nginx"`
fi
code 'nginx_user="'$nginx_user'"'
if [ -z "$nginx_user" ];then
    error "Variable \$nginx_user failed to populate."; x
fi
if [ -z "$php_fpm_user" ];then
    php_fpm_user="$nginx_user"
fi
code 'php_fpm_user="'$php_fpm_user'"'
nginx_user_home=$(getent passwd "$nginx_user" | cut -d: -f6 )
if [ -z "$prefix" ];then
    prefix=$(getent passwd "$php_fpm_user" | cut -d: -f6 )
fi
# Jika $php_fpm_user adalah nginx, maka $HOME nya adalah /nonexistent, maka
# perlu kita verifikasi lagi.
if [ ! -d "$prefix" ];then
    prefix=
fi
if [ -z "$prefix" ];then
    prefix=/usr/local/share
    container=www
fi
if [ -z "$container" ];then
    if [ "$php_fpm_user" == "$nginx_user" ];then
        container=.
    else
        container=public_html
    fi
fi
code 'prefix="'$prefix'"'
code 'container="'$container'"'
socket_filename=$(rcm-php-fpm-setup-project-config get --php-fpm-user="$php_fpm_user" --php-version="$php_version" --section="$php_fpm_section" --key=listen)
if [ -z "$socket_filename" ];then
    __; red Socket Filename of PHP-FPM not found.; x
fi
code 'socket_filename="'$socket_filename'"'
fastcgi_pass="unix:${socket_filename}"
code 'fastcgi_pass="'$fastcgi_pass'"'

if [[ "$url_port" == 80 || "$url_port" == 443 ]];then
    filename="$url_host"
    additional_path_custom_port=
else
    filename="${url_host}.${url_port}"
    additional_path_custom_port="/${url_port}"
fi

root="${prefix}/${container}/${url_host}${additional_path_custom_port}/web/${url_path_clean}"
code 'root="'$root'"'
code filename="$filename"
server_name="$url_host"
code server_name="$server_name"
root_parent=$(dirname "$root")
code 'root_parent="'$root_parent'"'
____

chapter Mengecek direktori root parent '`'$root_parent'`'.
isDirExists "$root_parent"
____

if [ -n "$notfound" ];then
    chapter Membuat direktori root parent.
    code sudo -u $php_fpm_user mkdir -p '"'$root_parent'"'
    sudo -u $php_fpm_user mkdir -p "$root_parent" || {
        code mkdir -p "$root_parent"
        code chown $php_fpm_user:$php_fpm_user '"'$root_parent'"'
        mkdir -p "$root_parent"
        chown $php_fpm_user:$php_fpm_user "$root_parent"
    }
    dirMustExists "$root_parent"
    ____
fi

chapter Mengecek direktori root '`'$root'`'.
isDirExists "$root"
____

if [ -n "$notfound" ];then
    chapter Membuat direktori root.
    code sudo -u $php_fpm_user mkdir -p '"'$root'"'
    sudo -u $php_fpm_user mkdir -p "$root" || {
        code mkdir -p "$root"
        code chown $php_fpm_user:$php_fpm_user '"'$root'"'
        mkdir -p "$root"
        chown $php_fpm_user:$php_fpm_user "$root"
    }
    dirMustExists "$root"
    ____
fi

# User yang digunakan sudah pasti adalah user nginx, karena akan dibuat di
# `/var/www`.
chapter Populate variable.
nginx_config_root="${nginx_user_home}/${url_host}${additional_path_custom_port}/nginx"
code 'nginx_config_root="'$nginx_config_root'"'
nginx_config_dir="${nginx_user_home}/${url_host}${additional_path_custom_port}/nginx.conf.d"
nginx_config_file="${nginx_user_home}/${url_host}${additional_path_custom_port}/nginx.conf"
code 'nginx_config_dir="'$nginx_config_dir'"'
code 'nginx_config_file="'$nginx_config_file'"'
adjustNginxConfigRoot "$url_path"
code 'nginx_config_root="'$nginx_config_root'"'
____

chapter Mengecek direktori nginx config root '`'$nginx_config_root'`'.
isDirExists "$nginx_config_root"
____

if [ -n "$notfound" ];then
    chapter Membuat direktori nginx config root '`'$nginx_config_root'`'.
    code mkdir -p '"'$nginx_config_root'"'
    mkdir -p "$nginx_config_root"
    code chown -R $nginx_user:$nginx_user '"'$nginx_config_root'"'
    chown -R $nginx_user:$nginx_user "$nginx_config_root"
    dirMustExists "$nginx_config_root"
    ____
fi

target="$nginx_config_root"
if [ -n "$url_path_clean" ];then
    target+="/${url_path_clean}"
fi
code 'target="'$target'"'
chapter Memeriksa direktori target '`'$target'`'
create=
if [[ "$target" == "$nginx_config_root" ]];then
    __ Target sama dengan nginx config root. Symbolic link tidak diperlukan.
else
    __ Target tidak sama dengan nginx config root. Symbolic link diperlukan.
    create=1
fi
____

if [ -n "$create" ];then
    source="$root"
    link_symbolic_dir "$source" "$target" "$nginx_user" absolute
fi

if [ -n "$url_path" ];then
    chapter Mengecek direktori nginx additional config '`'$nginx_config_dir'`'.
    isDirExists "$nginx_config_dir"
    ____

    if [ -n "$notfound" ];then
        chapter Membuat direktori nginx config root '`'$nginx_config_dir'`'.
        code mkdir -p '"'$nginx_config_dir'"'
        mkdir -p "$nginx_config_dir"
        code chown -R $nginx_user:$nginx_user '"'$nginx_config_dir'"'
        chown -R $nginx_user:$nginx_user "$nginx_config_dir"
        dirMustExists "$nginx_config_dir"
        ____
    fi
fi

chapter Prepare Arguments.
master_root="$nginx_config_root"
master_include="${nginx_config_dir}/*"
master_include_2="$nginx_config_file"
master_filename="$filename"
master_url_host="$url_host"
master_url_scheme="$url_scheme"
master_url_port="$url_port"
slave_root=
slave_filename="${url_path_clean//\//.}"
slave_dirname="$nginx_config_dir"
slave_fastcgi_pass="$fastcgi_pass"
slave_url_path="$url_path_clean_trailing"
slave_url_path_clean="$url_path_clean"
if [ -z "$url_path" ];then
    slave_filename="$(basename "$nginx_config_file")"
    slave_dirname="$(dirname "$nginx_config_file")"
    slave_url_path=
    slave_root="$root"
fi
code 'master_root="'$master_root'"'
code 'master_include="'$master_include'"'
code 'master_include_2="'$master_include_2'"'
code 'master_filename="'$master_filename'"'
code 'master_url_host="'$master_url_host'"'
code 'master_url_scheme="'$master_url_scheme'"'
code 'master_url_port="'$master_url_port'"'
code 'slave_root="'$slave_root'"'
code 'slave_filename="'$slave_filename'"'
code 'slave_dirname="'$slave_dirname'"'
code 'slave_fastcgi_pass="'$slave_fastcgi_pass'"'
code 'slave_url_path="'$slave_url_path'"'
____

if [ -z "$tempfile" ];then
    tempfile=$(mktemp -p /dev/shm -t rcm-drupal-setup-wrapper-nginx-virtual-host-autocreate-php-multiple-root.XXXXXX)
fi

chapter Mengecek '$PATH'.
code PATH="$PATH"
if grep -q '/snap/bin' <<< "$PATH";then
    __ '$PATH' sudah lengkap.
else
    __ '$PATH' belum lengkap.
    __ Memperbaiki '$PATH'
    PATH=/snap/bin:$PATH
    if grep -q '/snap/bin' <<< "$PATH";then
        __; green '$PATH' sudah lengkap.; _.
        __; magenta PATH="$PATH"; _.
    else
        __; red '$PATH' belum lengkap.; x
    fi
fi
____

INDENT+="    " \
PATH=$PATH \
rcm-nginx-virtual-host-autocreate-php-multiple-root $isfast \
    $is_certbot_obtain \
    --without-nginx-reload \
    --tempfile-trigger-reload="$tempfile" \
    --master-root="$master_root" \
    --master-include="$master_include" \
    --master-include-2="$master_include_2" \
    --master-filename="$master_filename" \
    --master-url-host="$master_url_host" \
    --master-url-scheme="$master_url_scheme" \
    --master-url-port="$master_url_port" \
    --slave-root="$slave_root" \
    --slave-filename="$slave_filename" \
    --slave-dirname="$slave_dirname" \
    --slave-fastcgi-pass="$slave_fastcgi_pass" \
    --slave-url-path="$slave_url_path" \
    --master-certbot-certificate-name="$certificate_name" \
    ; [ ! $? -eq 0 ] && x

if [ -s "$tempfile" ];then
    rcm_nginx_reload=1
fi

if [ -n "$rcm_nginx_reload" ];then
    INDENT+="    " \
    rcm-nginx-reload \
        ; [ ! $? -eq 0 ] && x
fi

if [ -n "$index_php" ];then
    path="${root}/index.php"
    is_temporary=
    is_temporary_string=
    case "$index_php" in
        1) contents="" ;;
        2) contents="<?php phpinfo(); ?>" ;;
        3) contents="<?= 'Hello World'; ?>" ;;
        4) contents="<pre><?php print_r(\$_SERVER); ?></pre>" ;;
        *) contents="<?= '${index_php}'; ?>" ;;
    esac
else
    path=$(mktemp -p "$root" -t index.XXXXXX.php)
    chown $php_fpm_user:$php_fpm_user "$path"
    is_temporary=1
    is_temporary_string=' temporary'
fi

chapter Mempersiapkan file"$is_temporary_string" '`'index.php'`'.
code 'path="'$path'"'
filename=$(basename "$path")
isFileExists "$path"
if [ -n "$found" ];then
    read existing_contents < "$path"
    if [[ ! "$existing_contents" == "$contents" ]];then
        found=
        notfound=1
    fi
fi
if [ -n "$notfound" ];then
    if [ -f "$path" ];then
        __ Backup file "$path".
        backupFile move "$path"
    fi
    __ Membuat file"$is_temporary_string" '`'index.php'`'.
    echo "$contents" > "$path"
    chown $php_fpm_user:$php_fpm_user "$path"
    fileMustExists "$path"
fi
____

chapter Mengecek HTTP Response Code.
if [ "$url_scheme" == https ];then
    _k=' -k'
else
    _k=''
fi
i=0
code=
if [ -z "$tempfile" ];then
    tempfile=$(mktemp -p /dev/shm -t rcm-drupal-setup-wrapper-nginx-virtual-host-autocreate-php-multiple-root.XXXXXX)
fi
until [ $i -eq 10 ];do
    __; magenta curl"$_k" -o /dev/null -s -w '"'%{http_code}\\n'"' '"'"${url_scheme}://127.0.0.1:${url_port}${url_path}/${filename}"'"' -H '"'Host: $url_host'"'; _.
    curl$_k -o /dev/null -s -w "%{http_code}\n" "${url_scheme}://127.0.0.1:${url_port}${url_path}/${filename}" -H "Host: ${url_host}" > $tempfile
    while read line; do e "$line"; _.; done < $tempfile
    code=$(head -1 $tempfile)
    if [[ "$code" =~ ^[2,3] ]];then
        break
    else
        __ Retry.
        __; magenta sleep .5; _.
        sleep .5
    fi
    let i++
done
if [[ "$code" =~ ^[2,3] ]];then
    __ HTTP Response code '`'$code'`' '('Required')'.
else
    __; red Terjadi kesalahan. HTTP Response code '`'$code'`'.; x
fi
____

if [ -n "$tempfile" ];then
    rm "$tempfile"
fi
if [ -n "$is_temporary" ];then
    rm "$path"
fi

chapter Finish.
__ URL'      ': "$url"
__ Web Root : "$root"
____

exit 0

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# --no-auto-add-group
# )
# VALUE=(
# --url
# --php-version
# --php-fpm-user
# --php-fpm-section
# --certificate-name
# --prefix
# --container
# --root
# )
# MULTIVALUE=(
# --php-fpm-config
# )
# FLAG_VALUE=(
# --index-php
# )
# CSV=(
    # 'long:--with-certbot-obtain,parameter:certbot_obtain'
    # 'long:--without-certbot-obtain,parameter:certbot_obtain,flag_option:reverse'
    # 'long:--phpinfo,parameter:index_php,flag_option:true=2'
    # 'long:--hello,parameter:index_php,flag_option:true=3'
    # 'long:--phpvariables,parameter:index_php,flag_option:true=4'
# )
# EOF
# clear
