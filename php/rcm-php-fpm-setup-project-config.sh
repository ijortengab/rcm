#!/bin/bash

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --config-line=*) config_line+=("${1#*=}"); shift ;;
        --config-line) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then config_line+=("$2"); shift; fi; shift ;;
        --fast) fast=1; shift ;;
        --file=*) file="${1#*=}"; shift ;;
        --file) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then file="$2"; shift; fi; shift ;;
        --php-fpm-user=*) php_fpm_user="${1#*=}"; shift ;;
        --php-fpm-user) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then php_fpm_user="$2"; shift; fi; shift ;;
        --php-version=*) php_version="${1#*=}"; shift ;;
        --php-version) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then php_version="$2"; shift; fi; shift ;;
        --section=*) section="${1#*=}"; shift ;;
        --section) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then section="$2"; shift; fi; shift ;;
        --with-autocreate-user) autocreate_user=1; shift ;;
        --without-autocreate-user) autocreate_user=0; shift ;;
        --[^-]*) shift ;;
        get)
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments


# Command.
command="$1"; shift
if [ -n "$command" ];then
    case "$command" in
        get) ;;
        *) echo -e "\e[91m""Command ${command} is unknown.""\e[39m"; exit 1
    esac
fi

# Parse arguments per command. Generated by parse-options.sh
case "$command" in
    get)
        _new_arguments=()
        while [[ $# -gt 0 ]]; do
            case "$1" in
                --key=*) key="${1#*=}"; shift ;;
                --key) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then key="$2"; shift; fi; shift ;;
                --php-version=*) php_version="${1#*=}"; shift ;;
                --php-version) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then php_version="$2"; shift; fi; shift ;;
                --section=*) section="${1#*=}"; shift ;;
                --section) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then section="$2"; shift; fi; shift ;;
                --[^-]*) shift ;;
                *) _new_arguments+=("$1"); shift ;;
            esac
        done
        set -- "${_new_arguments[@]}"
        unset _new_arguments
        ;;
esac

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }
____() { echo >&2; [ -n "$RCM_DELAY" ] && sleep "$RCM_DELAY"; }

# Define variables and constants.
RCM_DELAY=${RCM_DELAY:=.5}; [ -n "$fast" ] && unset RCM_DELAY
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '
PHP_FPM_POOL_DIRECTORY=${PHP_FPM_POOL_DIRECTORY:=/etc/php/[php-version]/fpm/pool.d}

if [ -n "$RCM_VERBOSE" ];then
    verbose="$RCM_VERBOSE"
fi
[[ -z "$verbose" || "$verbose" -lt 1 ]] && quiet=1 || quiet=
[[ "$verbose" -gt 0 ]] && loud=1
[[ "$verbose" -gt 1 ]] && loud=1 && louder=1
[[ "$verbose" -gt 2 ]] && loud=1 && louder=1 && debug=1



# Functions.
printVersion() {
    echo '0.17.1'
}
printHelp() {
    title RCM PHP-FPM Setup Project Config
    _ 'Variation '; yellow Default; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    nginx_user=
    conf_nginx=`command -v nginx > /dev/null && command -v nginx > /dev/null && nginx -V 2>&1 | grep -o -P -- '--conf-path=\K(\S+)'`
    if [ -f "$conf_nginx" ];then
        nginx_user=`grep -o -P '^user\s+\K([^;]+)' "$conf_nginx"`
    fi
    [ -n "$nginx_user" ] && { nginx_user=" ${nginx_user},"; }
    cat << EOF
Usage: rcm-php-fpm-setup-project-config [options]

Available commands: get.

Options:
   --php-version *
        Set the version of PHP. Available values: [a], [b], or other.
        [a]: 8.2
        [b]: 8.3
   --php-fpm-user
        Set the Unix user that used by PHP FPM. Default value is the user that used by web server. Available values:${nginx_user}`cut -d: -f1 /etc/passwd | while read line; do [ -d /home/$line ] && echo " ${line}"; done | tr $'\n' ','` or other. If the user does not exists, it will be autocreate as reguler user.
   --section *
        Set the section name.
   --file
        Set the name of file config. The filename should has the .conf extension
        to enable by daemon but you free to ignore it.
        If omit, it will use the section name with .conf extension.
   --without-autocreate-user ^
        Skip autocreate Unix user while config is created. Default to --with-autocreate-user.

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.

Environment Variables:
   PHP_FPM_POOL_DIRECTORY
        Default to $PHP_FPM_POOL_DIRECTORY

Dependency:
   nginx
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }


command-get() {
    local php section_name find replace found found_file
    php=$(cat <<'EOF'
$mode = $_SERVER['argv'][1];
switch ($mode) {
    case 'get':
        $file = $_SERVER['argv'][2];
        $section_name = $_SERVER['argv'][3];
        $what = $_SERVER['argv'][4];
        if (file_exists($file)) {
            $array = parse_ini_file($file, true);
            if (array_key_exists($section_name, $array)) {
                if (array_key_exists($what, $array[$section_name])) {
                    echo $array[$section_name][$what];
                    exit(0);
                }
            }
        }
        exit(1);
        break;
}
EOF
    )
    # Requirement, validate, and populate value.
    if [ -z "$php_version" ];then
        error "Argument --php-version required."; x
    fi
    # code 'php_version="'$php_version'"'
    if [ -z "$section" ];then
        error "Argument --section required."; x
    fi
    # code 'section="'$section'"'
    if [ -z "$key" ];then
        error "Argument --key required."; x
    fi
    # code 'key="'$key'"'
    # Rename variable.
    section_name="$section"
    # code 'section_name="'$section_name'"'
    find='[php-version]'
    replace="$php_version"
    PHP_FPM_POOL_DIRECTORY="${PHP_FPM_POOL_DIRECTORY/"$find"/"$replace"}"
    found=
    found_file=
    while read file; do
        if grep -q -F "[$section]" "$file";then
            found=1
            found_file="$file"
            break;
        fi
    done <<< `ls "$PHP_FPM_POOL_DIRECTORY"/*.conf`
    if [ -z "$found_file" ];then
        error File config that contains section is not found.; x
    fi
    php -r "$php" get "$found_file" "$section_name" "$key"
}

# Execute command.
if [[ -n "$command" && $(type -t "command-${command}") == function ]];then
    command-${command} "$@"
    exit 0
fi

# Title.
title rcm-php-fpm-setup-project-config
____

[ "$EUID" -ne 0 ] && { error This script needs to be run with superuser privileges.; x; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { error Unable to proceed, command not found: '`'`cut -d: -f1 <<< "${line}"`'`'.; x; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Functions.
backupFile() {
    local mode="$1"
    local oldpath="$2" i newpath
    local target_dir="$3"
    i=1
    dirname=$(dirname "$oldpath")
    basename=$(basename "$oldpath")
    if [ -n "$target_dir" ];then
        case "$target_dir" in
            parent) dirname=$(dirname "$dirname") ;;
            *) dirname="$target_dir"
        esac
    fi
    [ -d "$dirname" ] || { echo 'Directory is not exists.' >&2; return 1; }
    newpath="${dirname}/${basename}.${i}"
    if [ -f "$newpath" ]; then
        let i++
        newpath="${dirname}/${basename}.${i}"
        while [ -f "$newpath" ] ; do
            let i++
            newpath="${dirname}/${basename}.${i}"
        done
    fi
    case $mode in
        move)
            mv "$oldpath" "$newpath" ;;
        copy)
            local user=$(stat -c "%U" "$oldpath")
            local group=$(stat -c "%G" "$oldpath")
            cp "$oldpath" "$newpath"
            chown ${user}:${group} "$newpath"
    esac
}
fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}

# Requirement, validate, and populate value.
chapter Dump variable.
code 'command="'$command'"'
nginx_user=
conf_nginx=`command -v nginx > /dev/null && command -v nginx > /dev/null && nginx -V 2>&1 | grep -o -P -- '--conf-path=\K(\S+)'`
if [ -f "$conf_nginx" ];then
    nginx_user=`grep -o -P '^user\s+\K([^;]+)' "$conf_nginx"`
fi
code 'nginx_user="'$nginx_user'"'
if [ -z "$nginx_user" ];then
    error "Variable \$nginx_user failed to populate."; x
fi
if [ -z "$php_version" ];then
    error "Argument --php-version required."; x
fi
code 'php_version="'$php_version'"'
if [ -z "$php_fpm_user" ];then
    error "Argument --php-fpm-user required."; x
fi
code 'php_fpm_user="'$php_fpm_user'"'
if [ -z "$section" ];then
    error "Argument --section required."; x
fi
code 'section="'$section'"'
# Rename variable.
section_name="$section"
code 'section_name="'$section_name'"'
if [ -z "$file" ];then
    file="$section_name"
    file+=".conf"
fi
code 'file="'$file'"'
# Rename variable.
config_file="$file"
code 'config_file="'$config_file'"'
find='[php-version]'
replace="$php_version"
PHP_FPM_POOL_DIRECTORY="${PHP_FPM_POOL_DIRECTORY/"$find"/"$replace"}"
code 'PHP_FPM_POOL_DIRECTORY="'$PHP_FPM_POOL_DIRECTORY'"'
[ -z "$autocreate_user" ] && autocreate_user=1
[ "$autocreate_user" == 0 ] && autocreate_user=
code 'config_line=('"${config_line[@]}"')'
e; magenta 'config_line=('
first=1
for each in "${config_line[@]}";do
    if [ -n "$first" ];then
        magenta "'""$each""'";
        first=
    else
        magenta " '""$each""'";
    fi
done
magenta ')'; _.
____

php=$(cat <<'EOF'
// https://stackoverflow.com/questions/17316873/convert-array-to-an-ini-file
// https://stackoverflow.com/a/17317168
function clean($array, &$array_cleaned) {
    $array_cleaned = $array;
    unset($array_cleaned['user']);
    unset($array_cleaned['group']);
    unset($array_cleaned['listen']);
    unset($array_cleaned['listen.owner']);
    unset($array_cleaned['listen.group']);
}
function build_ini_string(array $a) {
    $out = '';
    $sectionless = '';
    foreach($a as $rootkey => $rootvalue){
        if(is_array($rootvalue)){
            // find out if the root-level item is an indexed or associative array
            $indexed_root = array_keys($rootvalue) == range(0, count($rootvalue) - 1);
            // associative arrays at the root level have a section heading
            if(!$indexed_root) $out .= PHP_EOL."[$rootkey]".PHP_EOL;
            // loop through items under a section heading
            foreach($rootvalue as $key => $value){
                if(is_array($value)){
                    // indexed arrays under a section heading will have their key omitted
                    $indexed_item = array_keys($value) == range(0, count($value) - 1);
                    foreach($value as $subkey=>$subvalue){
                        // omit subkey for indexed arrays
                        if($indexed_item) $subkey = "";
                        // add this line under the section heading
                        $out .= "{$key}[$subkey] = $subvalue" . PHP_EOL;
                    }
                }else{
                    if($indexed_root){
                        // root level indexed array becomes sectionless
                        $sectionless .= "{$rootkey}[] = $value" . PHP_EOL;
                    }else{
                        // plain values within root level sections
                        $out .= "$key = $value" . PHP_EOL;
                    }
                }
            }

        }else{
            // root level sectionless values
            $sectionless .= "$rootkey = $rootvalue" . PHP_EOL;
        }
    }
    return $sectionless.$out;
}
function array_diff_assoc_recursive($array_master, $array_compare, &$array_diff = array()) {
    $array_diff = (array) $array_diff;

    // Pisah dulu yang array.
    $array_master_keys_is_array = array();
    $array_master_keys_is_non_array = array();
    foreach ($array_master as $key => $value) {
        if (is_array($array_master[$key])) {
            $array_master_keys_is_array[$key] = $value;
        }
        else {
            $array_master_keys_is_non_array[$key] = $value;
        }
    }
    $array_compare_keys_is_array = array();
    $array_compare_keys_is_non_array = array();
    foreach ($array_compare as $key => $value) {
        if (is_array($array_compare[$key])) {
            $array_compare_keys_is_array[$key] = $value;
        }
        else {
            $array_compare_keys_is_non_array[$key] = $value;
        }
    }
    $array_diff += array_diff_assoc($array_master_keys_is_non_array, $array_compare_keys_is_non_array);
    foreach ($array_master_keys_is_array as $key => $value) {
        if (array_key_exists($key, $array_compare_keys_is_array)) {
            $result = array();
            array_diff_assoc_recursive($value, $array_compare_keys_is_array[$key], $result);
            if (!empty($array)) {
                $array_diff[$key] = $result;
            }
        }
        else {
            $array_diff[$key] = $value;
        }
    }
}

$mode = $_SERVER['argv'][1];
switch ($mode) {
    case 'is_different':
    case 'save':
        # Populate variable $is_different.
        $file = $_SERVER['argv'][2];
        $config_raw = parse_ini_file($file);
        clean($config_raw, $config_cleaned);
        $array_master_raw = unserialize($_SERVER['argv'][3]);
        clean($array_master_raw, $array_master_cleaned);
        // Tidak seperti rcm-roundcube-autoinstaller-nginx karena array master
        // hanya tambahan terhadap config utama.
        # $is_different = !empty(array_diff_assoc(array_map('serialize',$array_master_cleaned), array_map('serialize',$config_cleaned)));
        array_diff_assoc_recursive($array_master_cleaned, $config_cleaned, $result);
        $is_different = !empty($result);
        break;
    case 'create':
        $file = $_SERVER['argv'][2];
        $default_config = $_SERVER['argv'][3];
        $additional_config = $_SERVER['argv'][4];
        break;
}
switch ($mode) {
    case 'serialized_ini_string':
        // $sites_subdir = $_SERVER['argv'][2];
        $stdin = '';
        while (FALSE !== ($line = fgets(STDIN))) {
           $stdin .= $line;
        }
        $array = parse_ini_string($stdin);
        echo serialize($array);
        break;
    case 'is_different':
        $is_different ? exit(0) : exit(1);
        break;
    case 'save':
        if (!$is_different) {
            exit(0);
        }
        $section_name = $_SERVER['argv'][4];
        $config_new = array_replace_recursive($config_raw, $result);
        $config_new = array( $section_name => $config_new);
        $contents = build_ini_string($config_new);
        file_put_contents($file, $contents);
        break;
    case 'create':
        $file = $_SERVER['argv'][2];
        $section_name = $_SERVER['argv'][3];
        $default_config = $_SERVER['argv'][4];
        $additional_config = $_SERVER['argv'][5];
        $config = unserialize($default_config);
        if (!empty($additional_config)) {
            $additional_config_raw = unserialize($additional_config);
            clean($additional_config_raw, $additional_config);
            $config = array_replace_recursive($config, $additional_config);
        }
        $config = array( $section_name => $config);
        $content = build_ini_string($config);
        file_put_contents($file, trim($content)."\n");
        break;
    case 'is_exists':
        $file = $_SERVER['argv'][2];
        $section_name = $_SERVER['argv'][3];
        if (file_exists($file)) {
            $array = parse_ini_file($file, true);
            if (array_key_exists($section_name, $array)) {
                exit(0);
            }
        }
        exit(1);
        break;
}
EOF
)

chapter Mengecek file '*.conf' yang mengandung section '`'$section_name'`'
found=
found_file=
while read file; do
    # Ternyata lebih cepat menggunakan grep.
    # if php -r "$php" is_exists "$file" "$section_name";then
        # found=1
        # found_file="$file"
        # break;
    # fi
    if grep -q -F "[$section_name]" "$file";then
        found=1
        found_file="$file"
        break;
    fi
done <<< `ls "$PHP_FPM_POOL_DIRECTORY"/*.conf`

if [ -n "$found" ];then
    __ Ditemukan section '`'"$section_name"'`' pada file "$found_file"
else
    __ Tidak ditemukan section '`'"$section_name"'`'.
fi
____

restart=
if [ -n "$found" ];then
    if [ "${#config_line[@]}" -gt 0 ];then
        config_lines=
        for each in "${config_line[@]}";do
            config_lines+="$each"$'\n'
        done

        chapter Mengecek informasi file config.
        path="$found_file"
        code path='"'$path'"'
        filename="$(basename "$found_file")"
        reference="$(php -r "$php" serialized_ini_string <<< "$config_lines")"
        is_different=
        if php -r "$php" is_different "$path" "$reference";then
            is_different=1
            __ Diperlukan modifikasi file '`'$filename'`'.
        else
            __ File '`'$filename'`' tidak ada perubahan.
        fi
        ____

        if [ -n "$is_different" ];then
            chapter Memodifikasi file '`'$filename'`'.
            __ Backup file "$filename"
            backupFile copy "$path"
            php -r "$php" save "$path" "$reference" "$section_name"
            if php -r "$php" is_different "$path" "$reference";then
                __; red Modifikasi file '`'$filename'`' gagal.; x
            else
                __; green Modifikasi file '`'$filename'`' berhasil.; _.
                restart=1
            fi
            ____
        fi
    fi
    [ -n "$debug" ] && { while IFS= read -r line; do e "$line"; _.; done < "$found_file" ; _. ; }
else
    default_config="$(php -r "echo serialize([
        'user' => '$php_fpm_user',
        'group' => '$php_fpm_user',
        'listen' => '/run/php/php${php_version}-fpm-${section_name}.sock',
        'listen.owner' => '$nginx_user',
        'listen.group' => '$nginx_user',
        'pm' => 'dynamic',
        'pm.max_children' => '5',
        'pm.start_servers' => '2',
        'pm.min_spare_servers' => '1',
        'pm.max_spare_servers' => '3',
    ]);")"

    additional_config=
    if [ "${#config_line[@]}" -gt 0 ];then
        config_lines=
        for each in "${config_line[@]}";do
            config_lines+="$each"$'\n'
        done
        additional_config="$(php -r "$php" serialized_ini_string <<< "$config_lines")"
    fi

    chapter Membuat file PHP-FPM config.
    config_file="${PHP_FPM_POOL_DIRECTORY}/${config_file}"
    code 'config_file="'$config_file'"'
    if [ -f "$config_file" ];then
        __ Backup file "$config_file".
        backupFile move "$config_file"
    fi
    __ Membuat file '`'"$config_file"'`'.
    php -r "$php" create "$config_file" "$section_name" "$default_config" "$additional_config"
    fileMustExists "$config_file"
    found_file="$config_file"
    restart=1
    ____
fi

found=1
if [ -n "$restart" ];then
    chapter Mengecek PHP-FPM User.
    code id -u '"'$php_fpm_user'"'
    if id "$php_fpm_user" >/dev/null 2>&1; then
        __ User '`'$php_fpm_user'`' found.
    else
        __ User '`'$php_fpm_user'`' not found.;
        found=
    fi
    ____
fi
if [ -z "$found" ];then
    chapter Membuat Unix user.
    if [ -n "$autocreate_user" ];then
        code adduser $php_fpm_user --disabled-password --gecos "''"
        adduser "$php_fpm_user" --disabled-password --gecos ''
    else
        __ Flag --without-autocreate-user ditemukan.
        error User tidak dapat dibuat; x
    fi
    ____
fi
if [ -n "$restart" ];then
    chapter Restart PHP-FPM configuration.
    code /etc/init.d/php${php_version}-fpm restart
    /etc/init.d/php${php_version}-fpm restart 2>&1 &>/dev/null
    ____
fi

exit 0

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --with-end-options-specific-operand \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# )
# VALUE=(
# --php-version
# --php-fpm-user
# --section
# --file
# )
# MULTIVALUE=(
# --config-line
# )
# FLAG_VALUE=(
# )
# CSV=(
    # 'long:--with-autocreate-user,parameter:autocreate_user'
    # 'long:--without-autocreate-user,parameter:autocreate_user,flag_option:reverse'
# )
# OPERAND=(
# get
# )
# EOF
# clear


# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# VALUE=(
# --php-version
# --section
# --key
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear
