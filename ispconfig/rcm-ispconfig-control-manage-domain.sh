#!/bin/bash

# Prerequisite.
[ -f "$0" ] || { echo -e "\e[91m" "Cannot run as dot command. Hit Control+c now." "\e[39m"; read; exit 1; }

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --domain=*) domain="${1#*=}"; shift ;;
        --domain) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then domain="$2"; shift; fi; shift ;;
        --fast) fast=1; shift ;;
        --root-sure) root_sure=1; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Command.
command="$1"; shift
if [ -n "$command" ];then
    case "$command" in
        add|delete|isset|get_dns_record) ;;
        *) echo -e "\e[91m""Command ${command} is unknown.""\e[39m"; exit 1
    esac
fi

# Functions.
[[ $(type -t RcmIspconfigControlManageDomain_printVersion) == function ]] || RcmIspconfigControlManageDomain_printVersion() {
    echo '0.1.1'
}
[[ $(type -t RcmIspconfigControlManageDomain_printHelp) == function ]] || RcmIspconfigControlManageDomain_printHelp() {
    cat << EOF
RCM ISPConfig Control
Variation Manage Domain
Version `RcmIspconfigControlManageDomain_printVersion`

EOF
    cat << 'EOF'
Usage: rcm-ispconfig-control-manage-domain.sh [command] [options]

Available commands: add, delete, isset, get_dns_record.

Options:
   --domain
        Set the domain to control.

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.
   --root-sure
        Bypass root checking.

Environment Variables:
   DKIM_SELECTOR
        Default to default.

Dependency:
   ispconfig.sh
   php
EOF
}

# Help and Version.
[ -n "$help" ] && { RcmIspconfigControlManageDomain_printHelp; exit 1; }
[ -n "$version" ] && { RcmIspconfigControlManageDomain_printVersion; exit 1; }

# Dependency.
while IFS= read -r line; do
    command -v "${line}" >/dev/null || { echo -e "\e[91m""Unable to proceed, ${line} command not found." "\e[39m"; exit 1; }
done <<< `RcmIspconfigControlManageDomain_printHelp | sed -n '/^Dependency:/,$p' | sed -n '2,/^$/p' | sed 's/^ *//g'`

# Common Functions.
[[ $(type -t red) == function ]] || red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t green) == function ]] || green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t yellow) == function ]] || yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t blue) == function ]] || blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t magenta) == function ]] || magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t error) == function ]] || error() { echo -n "$INDENT" >&2; red "$@" >&2; echo >&2; }
[[ $(type -t success) == function ]] || success() { echo -n "$INDENT" >&2; green "$@" >&2; echo >&2; }
[[ $(type -t chapter) == function ]] || chapter() { echo -n "$INDENT" >&2; yellow "$@" >&2; echo >&2; }
[[ $(type -t title) == function ]] || title() { echo -n "$INDENT" >&2; blue "$@" >&2; echo >&2; }
[[ $(type -t code) == function ]] || code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
[[ $(type -t x) == function ]] || x() { echo >&2; exit 1; }
[[ $(type -t e) == function ]] || e() { echo -n "$INDENT" >&2; echo "$@" >&2; }
[[ $(type -t _) == function ]] || _() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
[[ $(type -t _,) == function ]] || _,() { echo -n "$@" >&2; }
[[ $(type -t _.) == function ]] || _.() { echo >&2; }
[[ $(type -t __) == function ]] || __() { echo -n "$INDENT" >&2; echo -n '    ' >&2; [ -n "$1" ] && echo "$@" >&2 || echo -n  >&2; }
[[ $(type -t ____) == function ]] || ____() { echo >&2; [ -n "$delay" ] && sleep "$delay"; }

# Functions.
[[ $(type -t fileMustExists) == function ]] || fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}

# Title.
title RCM ISPConfig Control
_ 'Variation '; yellow Manage Domain; _.
_ 'Version '; yellow `RcmIspconfigControlManageDomain_printVersion`; _.
____

# Requirement, validate, and populate value.
chapter Dump variable.
DKIM_SELECTOR=${DKIM_SELECTOR:=default}
code 'DKIM_SELECTOR="'$DKIM_SELECTOR'"'
code 'command="'$command'"'
ispconfig_domain_exists_sure=
code 'ispconfig_domain_exists_sure="'$ispconfig_domain_exists_sure'"'
delay=.5; [ -n "$fast" ] && unset delay
until [[ -n "$domain" ]];do
    read -p "Argument --domain required: " domain
done
code 'domain="'$domain'"'
____

if [ -z "$root_sure" ];then
    chapter Mengecek akses root.
    if [[ "$EUID" -ne 0 ]]; then
        error This script needs to be run with superuser privileges.; x
    else
        __ Privileges.; root_sure=1
    fi
    ____
fi

chapter Mengecek domain '`'$domain'`' di Module Mail ISPConfig.
php=$(cat <<-'EOF'
$stdin = '';
while (FALSE !== ($line = fgets(STDIN))) {
   $stdin .= $line;
}
$result = @unserialize($stdin);
if ($result === false) {
    echo('Unserialize failed: '. $stdin.PHP_EOL);
    exit(1);
}
$mode = $_SERVER['argv'][1];
switch ($mode) {
    case 'get_dkim_public':
        echo $result[0]['dkim_public'];
        break;

    case 'get_dkim_selector':
        echo $result[0]['dkim_selector'];
        break;

    case 'get_dkim_private':
        echo $result[0]['dkim_private'];
        break;

    case 'isset':
        if ($result === []) { // empty array
            exit(1); // not found.
        }
        exit(0);
        break;
}
EOF
)
notfound=
__ Create PHP Script from template '`'mail_domain_get_by_domain'`'.
template=mail_domain_get_by_domain
template_temp=$(ispconfig.sh mktemp "${template}.php")
template_temp_path=$(ispconfig.sh realpath "$template_temp")
__; magenta template_temp_path="$template_temp_path"; _.
sed -i -E -e '/echo/d' -e '/^\s*$/d' -e 's,\t,    ,g' -e 's/print_r/echo serialize/' \
    -e 's/\$domain\s+=\s+[^;]+;/\$domain = "'"$domain"'";/' \
    "$template_temp_path"
contents=$(<"$template_temp_path")
__ Execute PHP Script.
magenta "$contents"; _.
stdout=$(ispconfig.sh php "$template_temp")
__ Standard Output.
magenta stdout="$stdout"; _.
php -r "$php" isset <<< "$stdout" || notfound=1
if [ -z "$notfound" ];then
    __ Domain '`'$domain'`' telah terdaftar di ISPConfig.
    ispconfig_domain_exists_sure=1
    if [[ $command == isset ]];then
        exit 0
    fi
    _dkim_selector=$(php -r "$php" get_dkim_selector <<< "$stdout")
    dkim_public=$(php -r "$php" get_dkim_public <<< "$stdout")
    if [[ ! "$DKIM_SELECTOR" == "$_dkim_selector" ]];then
        __; red Terdapat perbedaan antara dkim_selector versi database dengan user input.; _.
        __; red Menggunakan value versi database.; _.
        DKIM_SELECTOR="$_dkim_selector"
        __; code DKIM_SELECTOR="$DKIM_SELECTOR"
    fi
    # Populate Global Variable
    dns_record=$(echo "$dkim_public" | sed -e "/-----BEGIN PUBLIC KEY-----/d" -e "/-----END PUBLIC KEY-----/d" | tr '\n' ' ' | sed 's/\ //g')
    if [[ $command == get_dns_record ]];then
        echo "$dns_record"
        exit 0
    fi
else
    __ Domain '`'$domain'`' belum terdaftar di ISPConfig.
    ispconfig_domain_exists_sure=
    if [[ $command == isset ]];then
        exit 1
    fi
fi

__ Cleaning temporary file.
__; code rm "$template_temp_path"
rm "$template_temp_path"
____

json=
if [[ $command == add && -n "$notfound" ]];then
    chapter Generate DKIM Public and Private Key
    token=$(pwgen 6 -1)
    . ispconfig.sh export > /dev/null
    dirname="$ispconfig_install_dir/interface/web/mail"
    temp_ajax_get_json="temp_ajax_get_json_${token}.php"
    cp "${dirname}/ajax_get_json.php" "${dirname}/${temp_ajax_get_json}"
    chmod go-r "${dirname}/${temp_ajax_get_json}"
    chmod go-w "${dirname}/${temp_ajax_get_json}"
    chmod go-x "${dirname}/${temp_ajax_get_json}"
    __ Mempersiapkan file '`'${dirname}/${temp_ajax_get_json}'`'
    fileMustExists "${dirname}/${temp_ajax_get_json}"
    sed -i "/\$app->auth->check_module_permissions('mail');/d" "${dirname}/${temp_ajax_get_json}"
    php=$(cat <<- 'EOF'
$dirname = $_SERVER['argv'][1];
$file = $_SERVER['argv'][2];
$domain = $_SERVER['argv'][3];
$dkim_selector = $_SERVER['argv'][4];
chdir($dirname);
$_GET['type'] = 'create_dkim';
$_GET['domain_id'] = $domain;
$_GET['dkim_selector'] = $dkim_selector;
$_GET['dkim_public'] = '';
include_once $file;
EOF
)
    json=$(php -r "$php" "$dirname" "${dirname}/${temp_ajax_get_json}" "$domain" "$DKIM_SELECTOR")
    __ Standard Output.
    magenta "$json"; _.
    __ Cleaning temporary file.
    __; code rm "$temp_ajax_get_json"
    rm "${dirname}/${temp_ajax_get_json}"
    ____
fi
if [[ $command == add && -n "$json" ]];then
    dkim_private=$(php -r "echo (json_decode(fgets(STDIN)))->dkim_private;" <<< "$json")
    dkim_public=$(php -r "echo (json_decode(fgets(STDIN)))->dkim_public;" <<< "$json")
    dns_record=$(php -r "echo (json_decode(fgets(STDIN)))->dns_record;" <<< "$json")
    if [ -z "$dns_record" ];then
        __; red DNS record not found.; x
    fi
    chapter Mendaftarkan domain '`'$domain'`' di Module Mail ISPConfig.
    __ Create PHP Script from template '`'mail_domain_add'`'.
    template=mail_domain_add
    template_temp=$(ispconfig.sh mktemp "${template}.php")
    template_temp_path=$(ispconfig.sh realpath "$template_temp")
    __; magenta template_temp_path="$template_temp_path"; _.
    parameter=''
    parameter+="\t\t'server_id' => '1',\n"
    parameter+="\t\t'domain' => '${domain}',\n"
    parameter+="\t\t'active' => 'y',\n"
    parameter+="\t\t'dkim' => 'y',\n"
    parameter+="\t\t'dkim_selector' => '${DKIM_SELECTOR}',\n"
    parameter+="\t\t'dkim_private' => '"
    while IFS= read -r line; do
        parameter+="${line}\n"
    done <<< "$dkim_private"
    parameter="${parameter:0:-2}"
    parameter+="',\n"
    parameter+="\t\t'dkim_public' => '"
    while IFS= read -r line; do
        parameter+="${line}\n"
    done <<< "$dkim_public"
    parameter="${parameter:0:-2}"
    parameter+="',\n"
    sed -i -E \
        -e ':a;N;$!ba;s|\$params\s+=\s+[^;]+;|\$params = array(\n'"${parameter}"'\n\t);|g' \
        "$template_temp_path"
    sed -i -E -e '/echo/d' -e '/^\s*$/d' -e 's,\t,    ,g' \
        "$template_temp_path"
    contents=$(<"$template_temp_path")
    __ Execute PHP Script.
    magenta "$contents"; _.
    ispconfig.sh php "$template_temp"
    __ Cleaning temporary file.
    __; code rm "$template_temp_path"
    rm "$template_temp_path"
    __ Verifikasi:
    php=$(cat <<-'EOF'
$stdin = '';
while (FALSE !== ($line = fgets(STDIN))) {
   $stdin .= $line;
}
$result = unserialize($stdin);
if ($result === []) { // empty array
    exit(1); // not found.
}
exit(0);
EOF
)
    template=mail_domain_get_by_domain
    template_temp=$(ispconfig.sh mktemp "${template}.php")
    template_temp_path=$(ispconfig.sh realpath "$template_temp")
    sed -i -E -e '/echo/d' -e '/^\s*$/d' -e 's,\t,    ,g' -e 's/print_r/echo serialize/' \
        -e 's/\$domain\s+=\s+[^;]+;/\$domain = "'"$domain"'";/' \
        "$template_temp_path"
    contents=$(<"$template_temp_path")
    magenta "$contents"; _.
    notfound=
    ispconfig.sh php "$template_temp" | php -r "$php" || notfound=1
    if [ -n "$notfound" ];then
        __; red Domain gagal terdaftar.; x
    else
        __; green Domain berhasil terdaftar.; _.
    fi
    ____
fi

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# --root-sure
# )
# VALUE=(
# --domain
# )
# CSV=(
# )
# EOF
# clear
