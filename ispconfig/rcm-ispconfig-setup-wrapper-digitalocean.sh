#!/bin/bash

# Prerequisite.
[ -f "$0" ] || { echo -e "\e[91m" "Cannot run as dot command. Hit Control+c now." "\e[39m"; read; exit 1; }

# Parse arguments. Generated by parse-options.sh
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --digitalocean-domain-exists-sure) digitalocean_domain_exists_sure=1; shift ;;
        --dns-record=*) dns_record="${1#*=}"; shift ;;
        --dns-record) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then dns_record="$2"; shift; fi; shift ;;
        --domain=*) domain="${1#*=}"; shift ;;
        --domain) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then domain="$2"; shift; fi; shift ;;
        --email=*) email="${1#*=}"; shift ;;
        --email) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then email="$2"; shift; fi; shift ;;
        --fast) fast=1; shift ;;
        --hostname=*) hostname="${1#*=}"; shift ;;
        --hostname) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then hostname="$2"; shift; fi; shift ;;
        --ispconfig-domain-exists-sure) ispconfig_domain_exists_sure=1; shift ;;
        --mail-provider=*) mail_provider="${1#*=}"; shift ;;
        --mail-provider) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then mail_provider="$2"; shift; fi; shift ;;
        --root-sure) root_sure=1; shift ;;
        --type=*) type="${1#*=}"; shift ;;
        --type) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then type="$2"; shift; fi; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Functions.
[[ $(type -t RcmIspconfigSetupWrapperDigitalocean_printVersion) == function ]] || RcmIspconfigSetupWrapperDigitalocean_printVersion() {
    echo '0.1.0'
}
[[ $(type -t RcmIspconfigSetupWrapperDigitalocean_printHelp) == function ]] || RcmIspconfigSetupWrapperDigitalocean_printHelp() {
    cat << EOF
RCM ISPConfig Setup
Variation Wrapper DigitalOcean
Version `RcmIspconfigSetupWrapperDigitalocean_printVersion`

EOF
    cat << 'EOF'
Usage: rcm-ispconfig-setup-wrapper-digitalocean.sh [options]

Options:
   --domain
        Set the domain name.
   --hostname
        Set the hostname.
   --type
        Available value: spf, dkim, dmarc.
   --mail-provider
        Required by SPF.
   --email
        Required by DMARC.
   --dns-record
        Required by DKIM.
   --ispconfig-domain-exists-sure
        Bypass domain exists checking by ISPConfig SOAP.
   --digitalocean-domain-exists-sure
        Bypass domain exists checking by DigitalOcean API.

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.
   --root-sure
        Bypass root checking.

Environment Variables:
   DKIM_SELECTOR
        Default to default

Dependency:
   ispconfig.sh
   php
EOF
}

# Help and Version.
[ -n "$help" ] && { RcmIspconfigSetupWrapperDigitalocean_printHelp; exit 1; }
[ -n "$version" ] && { RcmIspconfigSetupWrapperDigitalocean_printVersion; exit 1; }

# Dependency.
while IFS= read -r line; do
    command -v "${line}" >/dev/null || { echo -e "\e[91m""Unable to proceed, ${line} command not found." "\e[39m"; exit 1; }
done <<< `RcmIspconfigSetupWrapperDigitalocean_printHelp | sed -n '/^Dependency:/,$p' | sed -n '2,/^$/p' | sed 's/^ *//g'`

# Common Functions.
[[ $(type -t red) == function ]] || red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t green) == function ]] || green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t yellow) == function ]] || yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t blue) == function ]] || blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t magenta) == function ]] || magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
[[ $(type -t error) == function ]] || error() { echo -n "$INDENT" >&2; red "$@" >&2; echo >&2; }
[[ $(type -t success) == function ]] || success() { echo -n "$INDENT" >&2; green "$@" >&2; echo >&2; }
[[ $(type -t chapter) == function ]] || chapter() { echo -n "$INDENT" >&2; yellow "$@" >&2; echo >&2; }
[[ $(type -t title) == function ]] || title() { echo -n "$INDENT" >&2; blue "$@" >&2; echo >&2; }
[[ $(type -t code) == function ]] || code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
[[ $(type -t x) == function ]] || x() { echo >&2; exit 1; }
[[ $(type -t e) == function ]] || e() { echo -n "$INDENT" >&2; echo "$@" >&2; }
[[ $(type -t _) == function ]] || _() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
[[ $(type -t _,) == function ]] || _,() { echo -n "$@" >&2; }
[[ $(type -t _.) == function ]] || _.() { echo >&2; }
[[ $(type -t __) == function ]] || __() { echo -n "$INDENT" >&2; echo -n '    ' >&2; [ -n "$1" ] && echo "$@" >&2 || echo -n  >&2; }
[[ $(type -t ____) == function ]] || ____() { echo >&2; [ -n "$delay" ] && sleep "$delay"; }

# Functions.
[[ $(type -t fileMustExists) == function ]] || fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}

# Title.
title RCM ISPConfig Setup
_ 'Variation '; yellow Wrapper DigitalOcean; _.
_ 'Version '; yellow `RcmIspconfigSetupWrapperDigitalocean_printVersion`; _.
____

# Requirement, validate, and populate value.
chapter Dump variable.
DKIM_SELECTOR=${DKIM_SELECTOR:=default}
code 'DKIM_SELECTOR="'$DKIM_SELECTOR'"'
code 'action="'$action'"'
case "$type" in
    spf|dkim|dmarc) ;;
    *) type=
esac
until [[ -n "$type" ]];do
    _ Available value:' '; yellow spf, dkim, dmarc.; _.
    read -p "Argument --type required: " type
    case "$type" in
        spf|dkim|dmarc) ;;
        *) type=
    esac
done
code 'type="'$type'"'
case "$type" in
    spf)
        until [[ -n "$mail_provider" ]];do
            read -p "Argument --mail-provider required: " mail_provider
        done
        ;;
    dmarc)
        until [[ -n "$email" ]];do
            read -p "Argument --email required: " email
        done
        ;;
    dkim)
        until [[ -n "$dns_record" || -n "$dns_record_auto" ]];do
            read -p "Argument --dns-record required: " dns_record
        done
        ;;
esac
hostname=${hostname:=@}
code 'hostname="'$hostname'"'
code 'mail_provider="'$mail_provider'"'
delay=.5; [ -n "$fast" ] && unset delay
until [[ -n "$domain" ]];do
    read -p "Argument --domain required: " domain
done
code 'domain="'$domain'"'
code 'digitalocean_domain_exists_sure="'$digitalocean_domain_exists_sure'"'
code 'ispconfig_domain_exists_sure="'$ispconfig_domain_exists_sure'"'

if [ -z "$root_sure" ];then
    chapter Mengecek akses root.
    if [[ "$EUID" -ne 0 ]]; then
        error This script needs to be run with superuser privileges.; x
    else
        __ Privileges.; root_sure=1
    fi
    ____
fi

if [ -z "$ispconfig_domain_exists_sure" ];then
    _;_, ____________________________________________________________________;_.;_.;

    INDENT+="    ";
    source $(command -v rcm-ispconfig-control-manage-domain.sh)
    INDENT=${INDENT::-4}
    _;_, ____________________________________________________________________;_.;_.;

    if [ -n "$ispconfig_domain_exists_sure" ];then
        __; green Domain is exists.; _.
    else
        __; red Domain is not exists.; x
    fi
    if [ -z "$dns_record" ];then
        __; red DNS record not found.; x
    fi
fi

if [ -z "$digitalocean_domain_exists_sure" ];then
    _;_, ____________________________________________________________________;_.;_.;

    INDENT+="    ";
    source $(command -v rcm-digitalocean-api-manage-domain.sh)
    INDENT=${INDENT::-4}
    _;_, ____________________________________________________________________;_.;_.;

    if [ -n "$digitalocean_domain_exists_sure" ];then
        __; green Domain '`'"$domain"'`' found in DNS Digital Ocean.; _.
    else
        __; red Domain '`'"$domain"'`' not found in DNS Digital Ocean.; x
    fi
    ____
fi

php=$(cat <<-'EOF'
$data = $_SERVER['argv'][1];
echo '"'.implode('""', str_split($data, 200)).'"';
EOF
)

if [[ $type == spf ]];then
    data="v=spf1 a:${mail_provider} ~all"
    data=$(php -r "$php" "$data" )
    _;_, ____________________________________________________________________;_.;_.;

    INDENT+="    ";
    source $(command -v rcm-digitalocean-api-manage-domain-record.sh) add --type txt --hostname=@ --value="$data" --value-summarize="SPF"
    INDENT=${INDENT::-4}
    _;_, ____________________________________________________________________;_.;_.;
fi
if [[ $type == dmarc ]];then
    data="v=DMARC1; p=none; rua=${email}"
    data=$(php -r "$php" "$data" )
    _;_, ____________________________________________________________________;_.;_.;

    INDENT+="    ";
    source $(command -v rcm-digitalocean-api-manage-domain-record.sh) add --type txt --hostname=_dmarc --value="$data" --value-summarize="DMARC"
    INDENT=${INDENT::-4}
    _;_, ____________________________________________________________________;_.;_.;
fi
if [[ $type == dkim ]];then
    data="v=DKIM1; t=s; p=${dns_record}"
    data=$(php -r "$php" "$data" )
    _;_, ____________________________________________________________________;_.;_.;

    INDENT+="    ";
    source $(command -v rcm-digitalocean-api-manage-domain-record.sh) add --type txt --hostname=$DKIM_SELECTOR._domainkey --value="$data" --value-summarize="DKIM"
    INDENT=${INDENT::-4}
    _;_, ____________________________________________________________________;_.;_.;
fi

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# --root-sure
# --ispconfig-domain-exists-sure
# --digitalocean-domain-exists-sure
# )
# VALUE=(
# --domain
# --hostname
# --type
# --mail-provider
# --email
# --dns-record
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear
