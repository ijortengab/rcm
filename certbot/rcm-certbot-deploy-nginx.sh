#!/bin/bash

# Parse arguments. Generated by parse-options.sh.
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --domain=*) domain+=("${1#*=}"); shift ;;
        --domain) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then domain+=("$2"); shift; fi; shift ;;
        --fast) fast=1; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }
____() { echo >&2; [ -n "$RCM_DELAY" ] && sleep "$RCM_DELAY"; }

# Define variables and constants.
RCM_DELAY=${RCM_DELAY:=.5}; [ -n "$fast" ] && unset RCM_DELAY
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '
MAILBOX_HOST=${MAILBOX_HOST:=hostmaster}

# Functions.
printVersion() {
    echo '0.17.3'
}
printHelp() {
    title RCM Certbot Deploy
    _ 'Variation '; yellow Installer Nginx Authenticator Nginx; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << EOF
Usage: rcm-certbot-deploy-nginx [options]

Options:
   --domain
        Set the domain. Multivalue.

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.

Environment Variables:
   MAILBOX_HOST
        Default to $MAILBOX_HOST

Dependency:
   certbot
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Title.
title rcm-certbot-deploy-nginx
____

[ "$EUID" -ne 0 ] && { error This script needs to be run with superuser privileges.; x; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { error Unable to proceed, command not found: '`'`cut -d: -f1 <<< "${line}"`'`'.; x; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Functions.
Rcm_certbot() {
    # Global, untuk debug.
    local certbot_request line cache_file_basename
    local start end runtime line_number
    local expired="$1"
    local url="$2"
    local table=$HOME/.cache/rcm/rcm.table.cache
    local table_lock=$HOME/.cache/rcm/rcm.table.cache.lock
    local cache_file=
    local do_delete_record_cache_file=
    _Rcm_certbot() {
        if [ -f "$table" ];then
            # todo, cek jika multiline.
            line=$(grep -n -F "$url"' ' "$table")
            if [ -z "$line" ];then
                certbot_request=1
            else
                cache_file_basename=$(cut -d' ' -f2 <<< "$line")
                cache_file=$HOME/.cache/rcm/"$cache_file_basename"
            fi
        else
            certbot_request=1
        fi
        if [ -n "$cache_file" ];then
            if [ -f "$cache_file" ];then
                if [ -s "$cache_file" ];then
                    start=`date -r "$cache_file" +'%s'`
                    end=`date +%s`
                    runtime=$((end-start))
                    if [ $runtime -gt $expired ];then
                        do_delete_record_cache_file=1
                    fi
                else
                    do_delete_record_cache_file=1
                fi
            else
                do_delete_record_cache_file=1
            fi
        fi
        if [ -n "$do_delete_record_cache_file" ];then
            line_number=$(cut -d':' -f1 <<< "$line")
            sed -i $line_number'd' "$table"
            certbot_request=1
            if [ -f "$cache_file" ];then
                rm "$cache_file"
            fi
            cache_file=
        fi
        exit_code=0
        if [ -n "$certbot_request" ];then
            mkdir -p $HOME/.cache/rcm
            cache_file=$(mktemp --tmpdir=$HOME/.cache/rcm rcm.certbot.XXXXXXXXXXXX.cache)
            cache_file_basename=$(basename "$cache_file")
            certificate_name=$(sed 's|certbot://||' <<< "$url")
            msg='Another instance of Certbot is already running.'
            while true; do
                certbot certificates --cert-name="$certificate_name" 2>/dev/null > "$cache_file"
                exit_code=$?
                if [[ $(head -1 "$cache_file") == "$msg" ]];then
                    e Retrying...; _.
                    code sleep 3
                    sleep 3
                else
                    break
                fi
            done
            mkdir -p $(dirname "$table")
            echo "$url" "$cache_file_basename" >> "$table"
        fi
    }
    until [[ ! -e "$table_lock" ]];do
        sleep .1
        # Jika lebih dari 1 menit, maka hapus saja.
        start=`date -r "$table_lock" +'%s'`
        end=`date +%s`
        runtime=$((end-start))
        if [ $runtime -gt 60 ];then
            rm "$table_lock"
        fi
    done
    touch "$table_lock"
    _Rcm_certbot
    rm "$table_lock"
    if [ ! -f "$cache_file" ];then
        exit $exit_code
    fi
    if [ ! $exit_code -eq 0 ];then
        exit $exit_code
    fi
    cat "$cache_file"
}

# Require, validate, and populate value.
chapter Dump variable.
[ -n "$fast" ] && isfast=' --fast' || isfast=''
code 'MAILBOX_HOST="'$MAILBOX_HOST'"'
code 'domain=('"${domain[@]}"')'
if [[ "${#domain[@]}" -eq 0 ]];then
    error Argument --domain is required.; x
fi
# domain pertama adalah Certificate Name.
certificate_name=${domain[0]}
code 'certificate_name="'$certificate_name'"'
tempfile=
____

chapter Populate variable email.
email=$(certbot show_account 2>/dev/null | grep -o -P 'Email contact: \K(.*)')
if [ -n "$email" ];then
    __ Certbot account has found: "$email"
else
    email="${MAILBOX_HOST}@${domain[0]}"
fi
code 'email="'$email'"'
____

chapter Deploy Certificate.

arguments=()
for each in "${domain[@]}"; do
    arguments+=(--domain "$each")
done
set -- "${arguments[@]}"
if [ -z "$tempfile" ];then
    tempfile=$(mktemp -p /dev/shm -t rcm-certbot-deploy-nginx.XXXXXX)
    deletetempfile=1
fi
# https://eff-certbot.readthedocs.io/en/latest/using.html#combination
msg='Another instance of Certbot is already running.'
while true; do
    code certbot -v --non-interactive --nginx --agree-tos --email="$email" \
        "$@"
    certbot -v --non-interactive --nginx --agree-tos --email="$email" \
        "$@" 2>&1 | tee "$tempfile"
    if [[ $(head -1 "$tempfile") == "$msg" ]];then
        e Retrying...; _.
        code sleep 3
        sleep 3
    else
        break
    fi
done
____

chapter Verifikasi Certificate.
code certbot certificates --cert-name='"'"$certificate_name"
# Verifikasi terutama jika exit code tidak 0.
# Tidak perlu pakai cache.
if Rcm_certbot 0 "certbot://${certificate_name}" 2>/dev/null | tee "$tempfile" | grep -q -F 'Certificate Name: ';then
    while IFS= read -r line; do e "$line"; _.; done < $tempfile
else
    error Error has been occurred. The certificate has not found.
    [ -n "$deletetempfile" ] && rm "$tempfile"
    x
fi
____

[ -n "$deletetempfile" ] && rm "$tempfile"

exit 0

# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# )
# VALUE=(
# )
# MULTIVALUE=(
# --domain
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear
