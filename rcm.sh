#!/bin/bash

# Parse arguments. Generated by parse-options.sh
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --binary-directory-exists-sure) binary_directory_exists_sure=1; shift ;;
        --fast) fast=1; shift ;;
        --non-interactive) non_interactive=1; shift ;;
        --root-sure) root_sure=1; shift ;;
        --) shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        --[^-]*) shift ;;
        install|update|get|history|selfupdate|self-update)
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Command.
command="$1"; shift
if [ -n "$command" ];then
    case "$command" in
        update|history|install|get) ;;
        self-update|selfupdate) ;;
        *) command="rcm-${command}"
    esac
else
    command=list # internal only.
fi

if [ "$command" == 'get' ];then
    _new_arguments=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --save-as=*) save_as="${1#*=}"; shift ;;
            --save-as) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then save_as="$2"; shift; fi; shift ;;
            --[^-]*) shift ;;
            *) _new_arguments+=("$1"); shift ;;
        esac
    done
    set -- "${_new_arguments[@]}"
    unset _new_arguments
fi

if [ "$command" == 'install' ];then
    _new_arguments=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --path=*) path="${1#*=}"; shift ;;
            --path) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then path="$2"; shift; fi; shift ;;
            --url=*) url="${1#*=}"; shift ;;
            --url) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then url="$2"; shift; fi; shift ;;
            --[^-]*) shift ;;
            *) _new_arguments+=("$1"); shift ;;
        esac
    done
    set -- "${_new_arguments[@]}"
    unset _new_arguments
fi

if [ "$command" == 'history' ];then
    _new_arguments=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --delete=*) delete+=("${1#*=}"); shift ;;
            --delete) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then delete+=("$2"); shift; fi; shift ;;
            --delete-all) delete_all=1; shift ;;
            --fast) fast=1; shift ;;
            --) shift
                while [[ $# -gt 0 ]]; do
                    case "$1" in
                        *) _new_arguments+=("$1"); shift ;;
                    esac
                done
                ;;
            --[^-]*) shift ;;
            *) _new_arguments+=("$1"); shift ;;
        esac
    done
    set -- "${_new_arguments[@]}"
    unset _new_arguments
fi

# Termasuk selfupdate, dan self-update.
if [[ "$command" =~ ^self-*update$ ]];then
    # Parse arguments for subcommand self-update.
    # Generated by parse-options.sh
    _new_arguments=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --rollback) rollback=1; shift ;;
            --[^-]*) shift ;;
            *) _new_arguments+=("$1"); shift ;;
        esac
    done
    set -- "${_new_arguments[@]}"
    unset _new_arguments

    # Langsung saja bikin argument position.
    set -- update rcm ijortengab/rcm rcm.sh
fi

if [[ "$command" == 'update' ]];then
    # Parse arguments for subcommand self-update.
    # Generated by parse-options.sh
    _new_arguments=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --path=*) path="${1#*=}"; shift ;;
            --path) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then path="$2"; shift; fi; shift ;;
            --rollback) rollback=1; shift ;;
            --url=*) url="${1#*=}"; shift ;;
            --url) if [[ ! $2 == "" && ! $2 =~ ^-[^-] ]]; then url="$2"; shift; fi; shift ;;
            --[^-]*) shift ;;
            *) _new_arguments+=("$1"); shift ;;
        esac
    done
    set -- "${_new_arguments[@]}"
    unset _new_arguments
fi

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo "#" "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#" "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "#" '    ' >&2; [ -n "$1" ] && echo "$@" >&2 || echo -n  >&2; }
____() { echo >&2; [ -n "$delay" ] && sleep "$delay"; }

# Functions.
printVersion() {
    echo '0.12.0'
}
printHelp() {
    title Rapid Construct Massive
    _ 'Variation '; yellow Default; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << 'EOF'
Usage: rcm
       rcm [command]
       rcm history --delete-all
       rcm history --delete rcm-wsl-setup-lemp-stack --delete rcm-composer-autoinstaller
       rcm install rcm-drupal ijortengab/drupal-autoinstaller rcm/rcm-drupal.sh

Available commands: history, update, install.

Options:

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.
   --binary-directory-exists-sure
        Bypass binary directory checking.
   --root-sure
        Bypass root checking.
   --non-interactive ^
        Skip prompt for every options.

Environment Variables:
   BINARY_DIRECTORY
        Default to $__DIR__
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { echo -e "\e[91m""Unable to proceed, "'`'"${line}"'`'" command not found." "\e[39m"; exit 1; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Functions.
resolve_relative_path() {
    if [ -d "$1" ];then
        cd "$1" || return 1
        pwd
    elif [ -e "$1" ];then
        if [ ! "${1%/*}" = "$1" ]; then
            cd "${1%/*}" || return 1
        fi
        echo "$(pwd)/${1##*/}"
    else
        return 1
    fi
}
fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}
userInputBooleanDefaultNo() {
    __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow N; _, 'o and skip.'; _.
    __;  _, '['; yellow Y; _, ']'; _, ' '; yellow Y; _, 'es and continue.'; _.
    boolean=
    while true; do
        __; read -rsn 1 -p "Select: " char
        if [ -z "$char" ];then
            char=n
        fi
        case $char in
            y|Y) echo "$char"; boolean=1; break;;
            n|N) echo "$char"; break ;;
            *) echo
        esac
    done
}
userInputBooleanDefaultYes() {
    __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow Y; _, 'es and continue.'; _.
    __;  _, '['; yellow Esc; _, ']'; _, ' '; yellow N; _, 'o and skip.'; _.
    boolean=
    while true; do
        __; read -rsn 1 -p "Select: " char
        if [ -z "$char" ];then
            char=y
        fi
        case $char in
            y|Y) echo "$char"; boolean=1; break;;
            n|N) echo "$char"; break ;;
            $'\33') echo "n"; break ;;
            *) echo
        esac
    done
}
printBackupDialog() {
    _; _.
    __; _, Restore the value:' '; yellow "${backup_value}"; _, '. '; _, Would you like to use that value?; _.
    userInputBooleanDefaultYes
    if [ -n "$boolean" ];then
        __; _, Value; _, ' '; yellow "$backup_value"; _, ' ';  _, used.; _.
        value="$backup_value";
    fi
}
printHistoryDialog() {
    local count_max=$(wc -l <<< "$history_value")
    if [ $count_max -gt 9 ];then
        count_max=9
    fi
    unset count
    declare -i count
    count=0
    _; _.
    __ There are values available from history. Press the yellow key to select.
    while read opt; do
        count+=1
        __; _, '['; yellow $count; _, ']'; _, ' '; _, "$opt"; _.
    done <<< "$history_value"
    __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow S; _, 'kip and continue.'; _.
    while true; do
        __; read -rsn 1 -p "Select: " char;
        if [ -z "$char" ];then
            char=s
        fi
        case $char in
            s|S) echo "$char"; break ;;
            [1-$count_max])
                echo "$char"
                value=$(sed -n ${char}p <<< "$history_value")
                __; _, Value; _, ' '; yellow "$value"; _, ' ';  _, selected.; _.
                save_history=
                break ;;
            *) echo
        esac
    done
}
printSelectDialog() {
    local source=("${!1}")
    local what="$2"
    local first=1 e reference_key
    if [ -z "$what" ];then
        what=value
        if [ "${#source[@]}" -gt 1 ];then
            what=values
        fi
    fi
    unset count
    declare -i count
    count=0
    _; _.
    __; _, Available $what:; for e in "${source[@]}"; do
        if [ -n "$first" ];then first=; else _, ','; fi
        _, ' '; yellow "$e"
    done; _, '.'; _.
    _; _.
    __ Press the yellow key to select.
    __; _, '['; yellow Enter; _, ']'; _, ' '; yellow T; _, 'ype the value.'; _.
    __; _, '['; yellow Backspace; _, ']'; _, ' '; yellow S; _, 'witch to select list.'; _.
    select_mode=
    while true; do
        __; read -rsn 1 -p "Select: " char;
        if [ -z "$char" ];then
            char=t
        fi
        case $char in
            t|T) echo "$char"; break ;;
            s|S) select_mode=1; echo "$char"; break ;;
            $'\177') select_mode=1; echo "s"; break ;;
            *) echo
        esac
    done
    if [[ -n "$select_mode" ]];then
        _; _.
        __ Press the yellow key to select.
        for ((i = 0 ; i < ${#source[@]} ; i++)); do
            count+=1
            if [ $count -lt 10 ];then
                __; _, '['; yellow $count; _, ']'; _, ' '; _, "${source[$i]}"; _.
            else
                __; _, '['$count']' "${source[$i]}"; _.
            fi
        done
        __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow T; _, 'ype the number key.'; _.
        count_max="${#source[@]}"
        if [ $count_max -gt 9 ];then
            count_max=9
        fi
        while true; do
            __; read -rsn 1 -p "Select: " char;
            if [ -z "$char" ];then
                char=t
            fi
            case $char in
                t|T) echo "$char"; break ;;
                [1-$count_max])
                    echo "$char"
                    i=$((char - 1))
                    value="${source[$i]}"
                    break ;;
                *) echo
            esac
        done
        until [ -n "$value" ];do
            __; read -p "Type the number: " value
            if [[ $value =~ [^0-9] ]];then
                value=
            fi
            if [[ $value =~ ^0 ]];then
                value=
            fi
            if [ -n "$value" ];then
                value=$((value - 1))
                value="${source[$value]}"
            fi
        done
        __; _, Value; _, ' '; yellow "$value"; _, ' ';  _, selected.; _.
    fi
    while true; do
        if [ -n "$value" ];then
            ArraySearch "$value" source[@]
            reference_key="$_return"; unset _return; # Clear.
            if [ -n "$reference_key" ];then
                break
            else
                value=
            fi
        else
            if [ -n "$is_required" ];then
                __; read -p "Type the value: " value
            else
                __; read -p "Type the value or leave blank to skip: " value
                if [ -z "$value" ];then
                    break
                fi
            fi
        fi
    done
}
printSelectOtherDialog() {
    local source=("${!1}")
    local what="$2"
    local first=1 e reference_key
    if [ -z "$what" ];then
        what=value
        if [ "${#source[@]}" -gt 1 ];then
            what=values
        fi
    fi
    unset count
    declare -i count
    count=0
    _; _.
    __; _, Available $what:; for e in "${source[@]}"; do
        if [ -n "$first" ];then first=; else _, ','; fi
        _, ' '; yellow "$e"
    done; _, ', or other.'; _.
    _; _.
    __ Press the yellow key to select.
    __; _, '['; yellow Enter; _, ']'; _, ' '; yellow T; _, 'ype the value.'; _.
    __; _, '['; yellow Backspace; _, ']'; _, ' '; yellow S; _, 'witch to select list.'; _.
    select_mode=
    while true; do
        __; read -rsn 1 -p "Select: " char;
        if [ -z "$char" ];then
            char=t
        fi
        case $char in
            t|T) echo "$char"; break ;;
            s|S) select_mode=1; echo "$char"; break ;;
            $'\177') select_mode=1; echo "s"; break ;;
            *) echo
        esac
    done
    if [[ -n "$select_mode" ]];then
        _; _.
        __ Press the yellow key to select.
        for ((i = 0 ; i < ${#source[@]} ; i++)); do
            count+=1
            if [ $count -lt 10 ];then
                __; _, '['; yellow $count; _, ']'; _, ' '; _, "${source[$i]}"; _.
            else
                __; _, '['$count']' "${source[$i]}"; _.
            fi
        done
        __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow T; _, 'ype the number key.'; _.
        count_max="${#source[@]}"
        if [ $count_max -gt 9 ];then
            count_max=9
        fi
        while true; do
            __; read -rsn 1 -p "Select: " char;
            if [ -z "$char" ];then
                char=t
            fi
            case $char in
                t|T) echo "$char"; break ;;
                [1-$count_max])
                    echo "$char"
                    i=$((char - 1))
                    value="${source[$i]}"
                    break ;;
                *) echo
            esac
        done
        until [ -n "$value" ];do
            __; read -p "Type the number: " value
            if [[ $value =~ [^0-9] ]];then
                value=
            fi
            if [[ $value =~ ^0 ]];then
                value=
            fi
            if [ -n "$value" ];then
                value=$((value - 1))
                value="${source[$value]}"
            fi
        done
        __; _, Value; _, ' '; yellow "$value"; _, ' ';  _, selected.; _.
    fi
    if [ -z "$value" ];then
        if [ -n "$is_required" ];then
            __; read -p "Type the value: " value
        else
            __; read -p "Type the value or leave blank to skip: " value
        fi
    fi
}
ArraySearch() {
    local index match="$1"
    local source=("${!2}")
    for index in "${!source[@]}"; do
       if [[ "${source[$index]}" == "${match}" ]]; then
           _return=$index; return 0
       fi
    done
    return 1
}
ArrayDiff() {
    # Computes the difference of arrays.
    #
    # Globals:
    #   Modified: _return
    #
    # Arguments:
    #   1 = Parameter of the array to compare from.
    #   2 = Parameter of the array to compare against.
    #
    # Returns:
    #   None
    #
    # Example:
    #   ```
    #   my=("cherry" "manggo" "blackberry" "manggo" "blackberry")
    #   yours=("cherry" "blackberry")
    #   ArrayDiff my[@] yours[@]
    #   # Get result in variable `$_return`.
    #   # _return=("manggo" "manggo")
    #   ```
    local e
    local source=("${!1}")
    local reference=("${!2}")
    _return=()
    # inArray is alternative of ArraySearch.
    inArray () {
        local e match="$1"
        shift
        for e; do [[ "$e" == "$match" ]] && return 0; done
        return 1
    }
    if [[ "${#reference[@]}" -gt 0 ]];then
        for e in "${source[@]}";do
            if ! inArray "$e" "${reference[@]}";then
                _return+=("$e")
            fi
        done
    else
        _return=("${source[@]}")
    fi
}
ArrayUnique() {
    # Removes duplicate values from an array.
    #
    # Globals:
    #   Modified: _return
    #
    # Arguments:
    #   1 = Parameter of the input array.
    #
    # Returns:
    #   None
    #
    # Example:
    #   ```
    #   my=("cherry" "manggo" "blackberry" "manggo" "blackberry")
    #   ArrayUnique my[@]
    #   # Get result in variable `$_return`.
    #   # _return=("cherry" "manggo" "blackberry")
    #   ```
    local e source=("${!1}")
    # inArray is alternative of ArraySearch.
    inArray () {
        local e match="$1"
        shift
        for e; do [[ "$e" == "$match" ]] && return 0; done
        return 1
    }
    _return=()
    for e in "${source[@]}";do
        if ! inArray "$e" "${_return[@]}";then
            _return+=("$e")
        fi
    done
}
Rcm_resolve_dependencies() {
    local commands_required
    local command_required command_required_version
    local url github_owner_repo github_file_path github_media_type
    local is_updated
    commands_required=("$1")
    PATH="${BINARY_DIRECTORY}:${PATH}"
    commands_exists=()
    table_downloads=
    until [[ ${#commands_required[@]} -eq 0 ]];do
        _commands_required=()
        chapter Requires command.
        e Versi rcm saat ini: ${rcm_version}.
        for command_required in "${commands_required[@]}"; do
            command_required_version=
            if grep -q -F : <<< "$command_required";then
                command_required_version=$(cut -d: -f2 <<< "$command_required")
                command_required=$(cut -d: -f1 <<< "$command_required")
            elif Rcm_is_internal "$command_required";then
                command_required_version=${rcm_version}
            fi
            _ Requires command: "$command_required"
            if command -v "$command_required" > /dev/null;then
                _, ' [FOUND].';
                if [ -n "$command_required_version" ];then
                    command_current_version=$("$command_required" --version)
                    if [[ "$command_current_version" =~ [^0-9\.]+ ]];then
                        command_current_version=0
                    fi
                    if [[ ! "$command_required_version" == "$command_current_version" ]];then
                        _, ' Version required: '$command_required_version'.'
                        _, ' Current version: '$command_current_version'.'
                    fi
                    vercomp $command_current_version $command_required_version
                    if [[ $? -lt 2 ]];then
                        _.
                    else
                        _.
                        is_updated=
                        if Rcm_is_internal "$command_required";then
                            github_owner_repo=ijortengab/rcm
                            github_file_path=$(cut -d- -f2 <<< "$command_required")/"$command_required".sh
                            OLDINDENT="$INDENT"; INDENT+='    '
                            code rcm update $(sed s,^rcm-,, <<< "$command_required")
                            INDENT+='    '
                            blob_path=$(cut -d- -f2 <<< "$command_required")/"$command_required".sh
                            Rcm_github_release update $command_required $github_owner_repo $github_file_path
                            INDENT="$OLDINDENT"
                            is_updated=1
                        else
                            url=$(grep -F '['$command_required']' <<< "$table_downloads" | tail -1 | sed -E 's/.*\((.*)\).*/\1/')
                            if [ -n "$url" ];then
                                Rcm_parse_url "$url"
                                if [[ "$PHP_URL_HOST" == github.com ]];then
                                    # https://github.com/ijortengab/rcm/blob/master/cron/rcm-cron-setup-wsl-port-forwarding.sh
                                    # https://github.com/ijortengab/rcm/raw/master/cron/rcm-cron-setup-wsl-port-forwarding.sh
                                    # https://github.com/ijortengab/rcm/raw/refs/heads/master/cron/rcm-cron-setup-wsl-port-forwarding.sh
                                    github_media_type=$(cut -d/ -f 3 <<< $PHP_URL_PATH)
                                    if [[ $github_media_type == raw ]];then
                                        github_owner_repo=$(cut -d/ -f 1,2 <<< $PHP_URL_PATH)
                                        github_file_path=$(cut -d/ -f 5- <<< $PHP_URL_PATH)
                                        OLDINDENT="$INDENT"; INDENT+='    '
                                        code rcm update $(sed s,^rcm-,, <<< "$command_required") --url='"'"${PHP_URL_SCHEME}${PHP_URL_HOST}/${github_owner_repo}"'"' --path='"'"$github_file_path"'"'
                                        INDENT+='    '
                                        Rcm_github_release update $command_required $github_owner_repo $github_file_path
                                        INDENT="$OLDINDENT"
                                        is_updated=1
                                    fi
                                fi
                            fi
                        fi
                        if [[ -z "$is_updated" ]];then
                            error Gagal Update; x
                        fi
                    fi
                fi
            else
                _, ' [NOTFOUND].'; _.
                if [[ -f "$BINARY_DIRECTORY/$command_required" && ! -s "$BINARY_DIRECTORY/$command_required" ]];then
                    __ Empty file detected.
                    __; magenta rm "$BINARY_DIRECTORY/$command_required"; _.
                    rm "$BINARY_DIRECTORY/$command_required"
                fi
                if [ ! -f "$BINARY_DIRECTORY/$command_required" ];then
                    if Rcm_is_internal "$command_required";then
                        PHP_URL_SCHEME='https://'
                        PHP_URL_HOST='github.com'
                        github_owner_repo=ijortengab/rcm
                        github_file_path=$(cut -d- -f2 <<< "$command_required")/"$command_required".sh
                        OLDINDENT="$INDENT"; INDENT+='    '
                        code rcm install $(sed s,^rcm-,, <<< "$command_required") --url='"'"${PHP_URL_SCHEME}${PHP_URL_HOST}/${github_owner_repo}"'"' --path='"'"$github_file_path"'"'
                        INDENT+='    '
                        Rcm_github_release install "$command_required" "$github_owner_repo" "$github_file_path"
                        INDENT="$OLDINDENT"
                    elif [[ "$command_required" =~ ^rcm- ]];then
                        url=$(grep -F '['$command_required']' <<< "$table_downloads" | tail -1 | sed -E 's/.*\((.*)\).*/\1/')
                        if [ -n "$url" ];then
                            Rcm_parse_url "$url"
                            if [[ "$PHP_URL_HOST" == github.com ]];then
                                # Jika host dari Github, maka terdapat beberapa kemungkinan.
                                # https://github.com/ijortengab/rcm/blob/master/cron/rcm-cron-setup-wsl-port-forwarding.sh
                                # https://github.com/ijortengab/rcm/raw/refs/heads/master/cron/rcm-cron-setup-wsl-autorun-crond.sh
                                # https://github.com/ijortengab/bash/raw/master/commands/ssh-keep-alive-symlink-reference.sh
                                # https://github.com/ijortengab/bash/raw/refs/heads/master/commands/ssh-keep-alive-symlink-reference.sh
                                _github_media_type=$(cut -d/ -f 3 <<< $PHP_URL_PATH)
                                if [[ $_github_media_type == raw ]];then
                                    github_owner_repo=$(cut -d/ -f 1,2 <<< $PHP_URL_PATH)
                                    github_file_path=$(cut -d/ -f 5- <<< $PHP_URL_PATH)
                                    OLDINDENT="$INDENT"; INDENT+='    '
                                    code rcm install $(sed s,^rcm-,, <<< "$command_required") --url='"'"${PHP_URL_SCHEME}${PHP_URL_HOST}/${github_owner_repo}"'"' --path='"'"$github_file_path"'"'
                                    INDENT+='    '
                                    Rcm_github_release install $command_required $github_owner_repo $github_file_path
                                    INDENT="$OLDINDENT"
                                fi
                            fi
                        fi
                    elif [[ "$command_required" =~ \.sh$ ]];then
                        url=$(grep -F '['$command_required']' <<< "$table_downloads" | tail -1 | sed -E 's/.*\((.*)\).*/\1/')
                        if [ -n "$url" ];then
                            Rcm_parse_url "$url"
                            OLDINDENT="$INDENT"; INDENT+='    '
                            save_as="$command_required"
                            if [[ $(basename "$PHP_URL_PATH") == "$command_required" ]];then
                                code rcm get "$url"
                                INDENT+='    '
                                Rcm_get "$url"
                            else
                                code rcm get "$url" --save-as='"'"$command_required"'"'
                                INDENT+='    '
                                Rcm_get "$url"
                            fi
                            INDENT="$OLDINDENT"
                        fi
                    fi
                    if ! command -v "$command_required" > /dev/null;then
                        error Command '`'$command_required'`' not found, unable to auto download.; x
                    fi
                elif [[ ! -x "$BINARY_DIRECTORY/$command_required" ]];then
                    __; magenta chmod a+x "$BINARY_DIRECTORY/$command_required"; _.
                    chmod a+x "$BINARY_DIRECTORY/$command_required"
                fi
            fi
            commands_exists+=("$command_required")
            _help=$("$command_required" --help 2>/dev/null)
            # Hanya mendownload dependency dengan akhiran .sh (shell script) atau prefix rcm-.
            _dependency=$(echo "$_help" | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g' | grep -E '(^rcm-|\.sh$)')
            _download=$(echo "$_help" | sed -n '/^Download:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g')
            if [ -n "$_dependency" ];then
                [ -n "$table_downloads" ] && table_downloads+=$'\n'
                table_downloads+="$_download"
            fi
            unset _download
            unset _help
            if [ -n "$_dependency" ];then
                _dependency=($_dependency)
                ArrayDiff _dependency[@] commands_exists[@]
                if [[ ${#_return[@]} -gt 0 ]];then
                    _commands_required+=("${_return[@]}")
                    unset _return
                fi
                unset _dependency
            fi
        done
        ____

        chapter Dump variable.
        ArrayUnique _commands_required[@]
        commands_required=("${_return[@]}")
        unset _return
        unset _commands_required
        code 'commands_required=('"${commands_required[@]}"')'
        ____
    done
}
Rcm_prompt() {

    local command="$1"
    local chapter_printed=
    argument_pass=()
    argument_placeholders=
    available_subcommands=()
    _available_subcommands=`$command --help 2>/dev/null | sed -n -E 's/^Available commands?: ([^\.]+)\.$/\1/p' | head -1`
    if [ -n "$_available_subcommands" ];then
        available_subcommands=(`echo $_available_subcommands | tr ',' ' '`)
    fi
    if [ "${#available_subcommands[@]}" -gt 0 ];then
        chapter Prepare argument for command '`'$command'`'.
        chapter_printed=1
        what=subcommand
        if [ "${#available_subcommands[@]}" -gt 1 ];then
            what=subcommands
        fi
        printSelectDialog available_subcommands[@] "$what"
        if [ -n "$value" ];then
            argument_pass+=("${value}")
        fi
    fi
    options=`$command --help 2>/dev/null | sed -n '/^Options[:\.]$/,$p' | sed -n '2,/^\s*$/p'`
    if [ -n "$options" ];then
        if [ -z "$chapter_printed" ];then
            chapter Prepare argument for command '`'$command'`'.
        fi
        until [[ -z "$options" ]];do
            parameter=`sed -n 1p <<< "$options" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'`
            is_required=
            is_flag=
            value_addon=
            is_flagvalue=
            save_history=1
            if [[ "${parameter:(-1):1}" == '*' ]];then
                is_required=1
                parameter="${parameter::-1}"
                parameter=`xargs <<< "$parameter"`
            elif [[ "${parameter:(-1):1}" == '^' ]];then
                is_flag=1
                parameter="${parameter::-1}"
                parameter=`xargs <<< "$parameter"`
            fi
            if [[ "$parameter" == '--' ]];then
                is_required=
                is_flag=
                value_addon=multivalue
            fi
            label=`sed -n 2p <<< "$options" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'`
            if grep -q -i -E '(^|\.\s)Multivalue\.' <<< "$label";then
                value_addon=multivalue
            fi
            if grep -q -i -E '(^|\.\s)Can have value\.' <<< "$label";then
                value_addon=canhavevalue
            fi
            unset count
            declare -i count
            count=3
            placeholders=
            while true; do
                below=`sed -n ${count}p <<< "$options" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'`
                if grep -q '^--' <<< "$below";then
                    break
                fi
                if [ -z "$below" ];then
                    break
                fi
                if [ -n "$placeholders" ];then
                    placeholders+=$'\n'
                fi
                placeholders+="$below"
                count+=1
            done
            options=`sed -n ${count}',$p' <<< "$options"`
            value=
            backup_value=
            if [ -f "$backup_storage" ];then
                backup_value=$(grep -- "^${parameter}=.*$" "$backup_storage" | tail -1 | sed -E 's|'"^${parameter}=(.*)$"'|\1|')
            fi
            history_value=
            if [ -f "$history_storage" ];then
                history_value=$(grep -- "^${parameter}=.*$" "$history_storage" | tail -9 | sed -E 's|'"^${parameter}=(.*)$"'|\1|')
            fi
            available_values=()
            _available_values=`echo "$label" | grep -o -E 'Available values?:[^\.]+\.'| sed -n -E 's/^Available values?: ([^\.]+)\.$/\1/p'`
            _available_values_from_command=`echo "$label" | grep -i -o -E 'Values? available from command:\s*[^\(]+\((\)|[^\)]+\))(\.|, or others?\.)'`
            or_other=
            if [ -n "$_available_values" ];then
                if grep -i -q -E 'or others?' <<< "$_available_values";then
                    or_other=1
                    _available_values=`echo "$_available_values" | sed -E 's/or others?$//'`
                fi
            fi
            if [ -n "$_available_values_from_command" ];then
                if grep -i -q -E 'or others?' <<< "$_available_values_from_command";then
                    or_other=1
                fi
            fi
            if [ -n "$placeholders" ];then
                while read line; do
                    find=$(echo ${line} | cut -d: -f1 | xargs)
                    replace=$(echo ${line} | cut -d: -f2 | xargs)
                    label="${label/"$find"/"$replace"}"
                    if [ -n "$_available_values" ];then
                        _available_values="${_available_values/"$find"/"$replace"}"
                    fi
                done <<< "$placeholders"
            fi
            if [ -n "$_available_values" ];then
                available_values=(`echo $_available_values | tr ',' ' '`)
            fi
            _; _.
            if [ -n "$_available_values_from_command" ];then
                # Tidak ada cache jika value dari command.
                backup_value=
                history_value=
                save_history=
            fi
            if [ -n "$_available_values_from_command" ];then
                # parsing argument.
                _command_arguments=$(echo "$_available_values_from_command" | sed -n -E 's/^Values? available from command:\s*([^\)]+\))(\.$|, or others?\.$)/\1/p')
                _command=$(echo "$_command_arguments" | sed -n -E 's/^([^\(]+)\(([^\)]*)\)$/\1/p')
                _arguments=$(echo "$_command_arguments" | sed -n -E 's/^([^\(]+)\(([^\)]*)\)$/\2/p')
                if command -v "$_command" > /dev/null;then
                    if [ -n "$argument_placeholders" ];then
                        while read line; do
                            find=$(echo ${line} | cut -d: -f1 | xargs)
                            replace=$(echo ${line} | cut -d: -f2 | xargs)
                            label="${label/"$find"/"$replace"}"
                            if [ -n "$_arguments" ];then
                                _arguments="${_arguments/"$find"/"$replace"}"
                            fi
                        done <<< "$argument_placeholders"
                    fi
                fi
            fi
            if [ -n "$is_flag" ];then
                _ 'Argument '; magenta ${parameter};_, ' is '; green optional;_, '.'; _.
                _ "${label}"; _.
                _;_.
                __; _, Add this argument?; _.
                userInputBooleanDefaultNo
                if [ -n "$boolean" ]; then
                    if [[ "$value_addon" == 'canhavevalue' ]];then
                        __; _, Do you want fill with value?; _.
                        userInputBooleanDefaultNo
                        if [ -n "$boolean" ]; then
                            if [ -n "$backup_value" ];then
                                printBackupDialog
                            fi
                            if [ -z "$value" ];then
                                if [ -n "$history_value" ];then
                                    printHistoryDialog
                                fi
                            fi
                            if [ -z "$value" ];then
                                if [ "${#available_values[@]}" -gt 0 ];then
                                    printSelectDialog available_values[@]
                                fi
                            fi
                            until [[ -n "$value" ]];do
                                __; read -p "Type the value: " value
                            done
                            argument_pass+=("${parameter}=${value}")
                        else
                            argument_pass+=("${parameter}")
                        fi
                    else
                        argument_pass+=("${parameter}")
                    fi
                fi
            elif [[ "$parameter" == '--' ]];then
                _ 'Argument '; magenta ${parameter};_, ' is '; green optional;_, '.'; _.
                _ "${label}"; _.
                __; _, Add value?; _.
                userInputBooleanDefaultNo
                if [ -n "$boolean" ]; then
                    if [ -n "$history_value" ];then
                        printHistoryDialog
                    fi
                    if [ -z "$value" ];then
                        __; read -p "Type the value: " value
                    fi
                    if [ -n "$value" ];then
                        argument_pass+=("${parameter} ${value}")
                    fi
                fi
            else
                if [ -n "$is_required" ];then
                    _ 'Argument '; magenta ${parameter};_, ' is '; red required;_, '.'; _.
                    _ "${label}"; _.
                else
                    _ 'Argument '; magenta ${parameter};_, ' is '; green optional;_, '.'; _.
                    _ "${label}"; _.
                fi
                # @todo, argument prepopulate untuk flag.
                for each in "${argument_prepopulate[@]}";do
                    if grep -q -- "^${parameter}=" <<< "$each";then
                        value=$(echo "$each" | sed -n -E 's|^[^=]+=(.*)|\1|p')
                        _;_.
                        __; _, Value; _, ' '; yellow "$value"; _, ' ';  _, prepopulated.; _.
                        backup_value=
                        # argument_pass+=("${parameter}=${value}")
                        break
                    fi
                done
                if [ -n "$backup_value" ];then
                    printBackupDialog
                fi
                if [ -z "$value" ];then
                    if [ -n "$history_value" ];then
                        printHistoryDialog
                    fi
                fi
                if [ -z "$value" ];then
                    if [ -n "$_available_values_from_command" ];then
                        if command -v "$_command" > /dev/null;then
                            _; _.
                            [ -n "$_arguments" ] && _arguments=' '"$_arguments"
                            __; _, Get the output of '`'${_command}${_arguments}'`'.;_.

                            while read line;do
                                available_values+=("$line")
                            done <<< `${_command}${_arguments}`
                        fi
                    fi

                    if [ "${#available_values[@]}" -gt 0 ];then
                        if [ -n "$or_other" ];then
                            printSelectOtherDialog available_values[@]
                        else
                            printSelectDialog available_values[@]
                        fi
                    else
                        _; _.
                        if [ -n "$is_required" ];then
                            __; read -p "Type the value: " value
                        else
                            __; read -p "Type the value or leave blank to skip: " value
                        fi
                    fi
                fi
                if [ -n "$is_required" ];then
                    until [[ -n "$value" ]];do
                        __; read -p "Type the value: " value
                    done
                fi
                if [ -n "$value" ];then
                    argument_pass+=("${parameter}=${value}")
                    if [ -n "$argument_placeholders" ];then
                        argument_placeholders+=$'\n'
                    fi
                    argument_placeholders+='['"$parameter"']: '"$value"
                fi
            fi
            # Backup to text file.
            value=$(echo "$value" | sed -E 's/[^/a-z0-9A-Z_.,-]//g' | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
            if [ -n "$value" ];then
                mkdir -p $(dirname "$backup_storage")
                echo "${parameter}=${value}" >> "$backup_storage"
                if [ -f "$history_storage" ];then
                    if grep -q -- "^${parameter}=${value}\$" "$history_storage";then
                        save_history=
                    fi
                fi
                if [ -n "$save_history" ];then
                    mkdir -p $(dirname "$history_storage");
                    echo "${parameter}=${value}" >> "$history_storage"
                fi
            fi
            if [[ "$value_addon" == 'multivalue' ]];then
                again=1
                until [ -z "$again" ]; do
                    if [ -n "$is_flag" ];then
                        _; _.
                        __ Add this argument again?
                        userInputBooleanDefaultNo
                    else
                        _; _.
                        __ Add other value?
                        userInputBooleanDefaultNo
                    fi
                    if [ -n "$boolean" ];then
                        if [ -n "$is_flag" ];then
                            argument_pass+=("${parameter}")
                        elif [[ "$parameter" == '--' ]];then
                            if [ -n "$history_value" ];then
                                printHistoryDialog
                            fi
                            if [ -z "$value" ];then
                                __; read -p "Type the value: " value
                            fi
                            if [ -n "$value" ];then
                                argument_pass+=("${value}")
                            fi
                        else
                            __; read -p "Type the value: " value
                            [ -n "$value" ] && argument_pass+=("${parameter}=${value}")
                        fi
                        # Backup to text file.
                        value=$(echo "$value" | sed -E 's/[^/a-z0-9A-Z_.,-]//g' | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
                        if [ -n "$value" ];then
                            mkdir -p $(dirname "$backup_storage");
                            echo "${parameter}=${value}" >> "$backup_storage"
                            if [ -f "$history_storage" ];then
                                if grep -q -- "^${parameter}=${value}\$" "$history_storage";then
                                    save_history=
                                fi
                            fi
                            if [ -n "$save_history" ];then
                                mkdir -p $(dirname "$history_storage");
                                echo "${parameter}=${value}" >> "$history_storage"
                            fi
                        fi
                    else
                        again=
                    fi
                done
            fi
        done
        ____
    fi
}
Rcm_github_release() {
    local tag_name latest_version current_version current_path
    local backup_path url tempdir
    local mode=$1; shift
    local shell_script=$1; shift
    if [ -z "$shell_script" ];then
        error "Operand <shell_script> required."; x
    fi
    local github_repo=$1; shift
    if [ -z "$github_repo" ];then
        error "Operand <github_repo> required."; x
    fi
    local blob_path=$1; shift
    if [ -z "$blob_path" ];then
        error "Operand <blob_path> required."; x
    fi
    case $mode in
        install)
            if command -v $shell_script >/dev/null;then
                error "Command has exists: ${shell_script}."; x
            fi
            tag_name=$(Rcm_wget 3600 https://api.github.com/repos/$github_repo/releases/latest | grep '^  "tag_name": ".*",$' | sed -E 's/  "tag_name": "(.*)",/\1/')
            if [ -z "$tag_name" ];then
                error "The repository does not have any releases."; x
            fi
            latest_version=$(sed -E 's/v?(.*)/\1/' <<< "$tag_name")
        ;;
        update)
            if ! command -v $shell_script >/dev/null;then
                error "Command not found: ${shell_script}."; x
            fi
            current_version=`$shell_script --version`
            current_path=$(which $shell_script)
            current_path=$(realpath "$current_path")
            if [ -n "$rollback" ];then
                previous_path=$HOME/.cache/rcm/$github_repo/rollback/$shell_script
                if [ -f "$previous_path" ];then
                    # Override now
                    cp "$previous_path" "$current_path"
                    old_version=$current_version
                    current_version=`$shell_script --version`
                    _ 'Success rollback '; magenta $shell_script; _, ' to version: '; yellow $current_version; _.
                    rm $HOME/.cache/rcm/$github_repo/rollback/$shell_script
                    # Dalam satu direktori ini bisa terdapat banyak file. Contoh
                    # rcm, rcm-composer-autoinstaller
                    rmdir --ignore-fail-on-non-empty $HOME/.cache/rcm/$github_repo/rollback
                else
                    _ 'No previous version found. '; _.
                fi
                exit 0
            fi
            tag_name=$(Rcm_wget 3600 https://api.github.com/repos/$github_repo/releases/latest | grep '^  "tag_name": ".*",$' | sed -E 's/  "tag_name": "(.*)",/\1/')
            if [ -z "$tag_name" ];then
                error "The repository does not have any releases."; x
            fi
            latest_version=$(sed -E 's/v?(.*)/\1/' <<< "$tag_name")
            if [ "$current_version" == "$latest_version" ];then
                _ 'You are already using the latest available '; magenta $shell_script; _, ' version: '; yellow $latest_version; _.
                exit 0
            fi
            backup_path=$HOME/.cache/rcm/$github_repo/rollback/$shell_script
            mkdir -p $(dirname "$backup_path")
            cp "$current_path" "$backup_path"
            if [ ! -f "$backup_path" ];then
                error Failed to save backup file: "$backup_path".; x
            fi
    esac
    local cache_directory=$HOME/.cache/rcm/$github_repo/$latest_version
    if [ ! -d "$cache_directory" ];then
        _ 'Downloading version: '; yellow $latest_version; _.
        url='https://api.github.com/repos/'$github_repo'/tarball/'$tag_name
        tempdir=$(mktemp -d)
        cd "$tempdir"
        wget -q -O "${tag_name}.tar.gz" "$url"
        if [ ! -f "${tag_name}.tar.gz" ];then
            error Failed to download file: "${tag_name}.tar.gz".
            rm -rf "$tempdir"
            x
        fi
        tar xfz "${tag_name}.tar.gz"
        local found_directory_extracted=$(find -maxdepth 1 -mindepth 1 -type d)
        if [ ! -d "$found_directory_extracted" ];then
            error Failed to extract archieve: "${tag_name}.tar.gz".;
            cd - >/dev/null
            rm -rf "$tempdir"
            x
        fi
        mkdir -p $(dirname "$cache_directory");
        mv $(realpath "$found_directory_extracted") "$cache_directory"
        # Cleaning.
        cd - >/dev/null
        rm -rf "$tempdir"
    else
        _ 'Using downloaded version: '; yellow $latest_version; _.
    fi
    local filename="${cache_directory}/${blob_path}"
    if [ ! -f "$filename" ];then
        error File is not found: "$filename".; x
    fi
    case $mode in
        install)
            if [ -f "${BINARY_DIRECTORY}/${shell_script}" ];then
                __ Backup file "${BINARY_DIRECTORY}/${shell_script}".
                backupFile move "${BINARY_DIRECTORY}/${shell_script}"
            elif [ -h "${BINARY_DIRECTORY}/${shell_script}" ];then
                __ Backup file "${BINARY_DIRECTORY}/${shell_script}".
                backupFile move "${BINARY_DIRECTORY}/${shell_script}"
            fi
            code cp '"'$filename'"' '"'$BINARY_DIRECTORY/$shell_script'"'
            cp "$filename" $BINARY_DIRECTORY/$shell_script
            current_version=`$shell_script --version`
            _ 'Success install '; magenta $shell_script; _, ' version: '; yellow $current_version; _.
        ;;
        update)
            cp "$filename" "$current_path"
            old_version=$current_version
            current_version=`$shell_script --version`
            _ 'Success update '; magenta $shell_script; _, ' to version: '; yellow $current_version; _.
            e To rollback version $old_version, execute the latest command with --rollback options.
        ;;
    esac
}
sleepExtended() {
    local countdown=$1
    countdown=$((countdown - 1))
    while [ "$countdown" -ge 0 ]; do
        printf "\r\033[K" >&2
        printf %"$countdown"s | tr " " "." >&2
        printf "\r"
        countdown=$((countdown - 1))
        if [ "$countdown" -ge 0 ];then
            sleep .9
        fi
    done
}
immediately() {
    countdown=0
}
vercomp() {
    # https://www.google.com/search?q=bash+compare+version
    # https://stackoverflow.com/a/4025065
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]];then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done
    return 0
}
backupFile() {
    local mode="$1"
    local oldpath="$2" i newpath
    i=1
    newpath="${oldpath}.${i}"
    if [ -f "$newpath" ]; then
        let i++
        newpath="${oldpath}.${i}"
        while [ -f "$newpath" ] ; do
            let i++
            newpath="${oldpath}.${i}"
        done
    fi
    case $mode in
        move)
            mv "$oldpath" "$newpath" ;;
        copy)
            local user=$(stat -c "%U" "$oldpath")
            local group=$(stat -c "%G" "$oldpath")
            cp "$oldpath" "$newpath"
            chown ${user}:${group} "$newpath"
    esac
}
Rcm_wget() {
    # Global, untuk debug.
    local http_request line cache_file_basename
    local start end runtime line_number
    http_request=
    local expired="$1"
    local url="$2"
    local table=$HOME/.cache/rcm/rcm.table.cache
    local cache_file=
    if [ -f "$table" ];then
        line=$(grep -n -F "$url"' ' "$table")
        if [ -z "$line" ];then
            http_request=1
        else
            cache_file_basename=$(cut -d' ' -f2 <<< "$line")
            cache_file=$HOME/.cache/rcm/"$cache_file_basename"
        fi
    else
        http_request=1
    fi
    local do_delete_record_cache_file=
    if [ -n "$cache_file" ];then
        if [ -f "$cache_file" ];then
            start=`date -r "$cache_file" +'%s'`
            end=`date +%s`
            runtime=$((end-start))
            if [ $runtime -gt $expired ];then
                do_delete_record_cache_file=1
            fi
        else
            do_delete_record_cache_file=1
        fi
    fi
    if [ -n "$do_delete_record_cache_file" ];then
        line_number=$(cut -d':' -f1 <<< "$line")
        sed -i $line_number'd' "$table"
        http_request=1
        if [ -f "$cache_file" ];then
            rm "$cache_file"
        fi
        cache_file=
    fi
    if [ -n "$http_request" ];then
        mkdir -p $HOME/.cache/rcm
        cache_file=$(mktemp --tmpdir=$HOME/.cache/rcm rcm.wget.XXXXXXXXXXXX.cache)
        cache_file_basename=$(basename "$cache_file")
        # echo wget -q -O "$cache_file" "$url"
        wget -q -O "$cache_file" "$url"
        touch "$cache_file" # wajib karena wget mengubah modified sesuai http header response.
        mkdir -p $(dirname "$table")
        echo "$url" "$cache_file_basename" >> "$table"
    fi
    if [ ! -f "$cache_file" ];then
        exit 1
    fi
    cat "$cache_file"
}
Rcm_list() {
    # git ls-files | grep -E '^.+/rcm.+\.sh$' | cut -d/ -f2 | sed -e 's,^rcm-,,' -e 's,\.sh$,,'
    cat << 'EOF'
amavis-setup-ispconfig
certbot-autoinstaller
certbot-digitalocean-autoinstaller
certbot-obtain-certificates
certbot-setup-nginx
composer-autoinstaller
cron-setup-wsl-autorun-crond
cron-setup-wsl-autorun-sshd
cron-setup-wsl-port-forwarding
debian-11-setup-basic
debian-12-setup-basic
digitalocean-api-manage-domain-record
digitalocean-api-manage-domain
ispconfig-autoinstaller-nginx
ispconfig-control-manage-domain
ispconfig-control-manage-email-alias
ispconfig-control-manage-email-mailbox
ispconfig-setup-dump-variables
ispconfig-setup-internal-command
ispconfig-setup-smtpd-certificate
ispconfig-setup-variation1
ispconfig-setup-variation2
ispconfig-setup-variation3
ispconfig-setup-variation4
ispconfig-setup-variation5
ispconfig-setup-wrapper-certbot-setup-nginx
ispconfig-setup-wrapper-digitalocean
ispconfig-setup-wrapper-nginx-setup-php
mariadb-assign-grant-all
mariadb-autoinstaller
mariadb-database-autocreate
mariadb-setup-ispconfig
mariadb-setup-project-database
mariadb-user-autocreate
nginx-autoinstaller
nginx-setup-front-controller-php
nginx-setup-hello-world-php
nginx-setup-hello-world-static
nginx-setup-ispconfig
nginx-setup-php
nginx-setup-static
php-autoinstaller
php-fpm-setup-pool
php-setup-adjust-cli-version
php-setup-ispconfig
phpmyadmin-autoinstaller-nginx
postfix-autoinstaller
postfix-setup-ispconfig
roundcube-autoinstaller-nginx
roundcube-setup-ispconfig-integration
ssh-setup-open-ssh-tunnel
ssh-setup-sshd-listen-port
ubuntu-22.04-setup-basic
wsl-setup-lemp-stack
EOF
}
Rcm_is_internal() {
    local command="$1"
    if [[ "$command" =~ ^rcm- ]];then
        command_list=$(Rcm_list)
        command_without_prefix=$(sed s,^rcm-,, <<< "$command")
        if grep -q ^"$command_without_prefix"$ <<< "$command_list";then
            return 0
        fi
    fi
    return 1
}
Rcm_parse_url() {
    PHP_URL_SCHEME="$(echo "$1" | grep :// | sed -e's,^\(.*://\).*,\1,g')"
    _PHP_URL_SCHEME_REVERSE="$(echo ${1/$PHP_URL_SCHEME/})"
    _PHP_URL_USER_PASS="$(echo $_PHP_URL_SCHEME_REVERSE | grep @ | cut -d@ -f1)"
    # extract the user and password (if any)
    PHP_URL_PASS=`echo $_PHP_URL_USER_PASS | grep : | cut -d: -f2`
    if [ -n "$PHP_URL_PASS" ]; then
        PHP_URL_USER=`echo $_PHP_URL_USER_PASS | grep : | cut -d: -f1`
    else
        PHP_URL_USER=$_PHP_URL_USER_PASS
    fi
    _PHP_URL_HOST_PORT="$(echo ${_PHP_URL_SCHEME_REVERSE/$_PHP_URL_USER_PASS@/} | cut -d/ -f1)"
    # by request host without port
    PHP_URL_HOST="$(echo $_PHP_URL_HOST_PORT | sed -e 's,:.*,,g')"
    # by request - try to extract the port
    PHP_URL_PORT="$(echo $_PHP_URL_HOST_PORT | sed -e 's,^.*:,:,g' -e 's,.*:\([0-9]*\).*,\1,g' -e 's,[^0-9],,g')"
    # extract the path (if any)
    PHP_URL_PATH="$(echo $_PHP_URL_SCHEME_REVERSE | grep / | cut -d/ -f2-)"
}
Rcm_update() {
    if [ -z "$1" ];then
        error "Operand <extension> required."; x
    fi
    local extension=$1; shift
    local shell_script="rcm-${extension}"
    if ! command -v $shell_script >/dev/null;then
        error "Command not found: ${shell_script}."; x
    fi
    local table=$HOME/.config/rcm/rcm.table.extension
    if [ -z "$url" ];then
        line=
        if [ -f "$table" ];then
            line=$(grep -n "^$extension"' ' "$table" | tail -1)
        fi
        if [ -n "$line" ];then
            url=$(cut -d' ' -f2 <<< "$line")
            if [ -z "$path" ];then
                path=$(cut -d' ' -f3 <<< "$line")
            fi
        else
            if Rcm_is_internal "$shell_script";then
                url=https://github.com/ijortengab/rcm
                path=$(cut -d- -f2 <<< "$shell_script")/"$shell_script".sh
            fi
        fi
    fi
    notfound=
    if [ -z "$url" ];then
        notfound=1
        parameter='--url'
        label='The URL repository.'
        _ 'Argument '; magenta ${parameter};_, ' is '; red required;_, '.'; _.
        _ "${label}"; _.
    fi
    until [ -n "$url" ];do
        __; read -p "Type the value: " url
    done
    if [ -z "$path" ];then
        notfound=1
        parameter='--path'
        label='Path to the file. Default value is `'rcm/rcm-${extension}.sh'`.'
        _ 'Argument '; magenta ${parameter};_, ' is '; green optional;_, '.'; _.
        _ "${label}"; _.
        __; read -p "Type the value or leave blank to skip: " path
    fi
    if [ -z "$path" ];then
        path=rcm/rcm-${extension}.sh
    fi
    Rcm_parse_url "$url"
    if [[ "$PHP_URL_HOST" == github.com ]];then
        if [ -n "$notfound" ];then
            mkdir -p $HOME/.config/rcm
            echo "$extension" "$url" "$path" >> "$table"
        fi
        github_owner_repo=$(cut -d/ -f 1,2 <<< $PHP_URL_PATH)
        Rcm_github_release update rcm-${extension} $github_owner_repo $path
    else
        error Only supports URLs from Github.;
        line=$(grep -n "^$extension"' ' "$table" | tail -1)
        if [ -n "$line" ];then
            line_number=$(cut -d':' -f1 <<< "$line")
            sed -i $line_number'd' "$table"
        fi
    fi
}
Rcm_install() {
    if [ -z "$1" ];then
        error "Operand <extension> required."; x
    fi
    local extension=$1; shift
    local shell_script="rcm-${extension}"
    if command -v $shell_script >/dev/null;then
        error "Command has exists: ${shell_script}."; x
    fi
    # VarDump extension url
    notfound=
    if [ -z "$url" ];then
        notfound=1
        parameter='--url'
        label='The URL repository.'
        _ 'Argument '; magenta ${parameter};_, ' is '; red required;_, '.'; _.
        _ "${label}"; _.
    fi
    until [ -n "$url" ];do
        __; read -p "Type the value: " url
    done
    if [ -n "$notfound" ];then
        ____
    fi
    if [ -z "$path" ];then
        notfound=1
        parameter='--path'
        label='Path to the file. Default value is `'rcm/rcm-${extension}.sh'`.'
        _ 'Argument '; magenta ${parameter};_, ' is '; green optional;_, '.'; _.
        _ "${label}"; _.
        __; read -p "Type the value or leave blank to skip: " path
    fi
    if [ -n "$notfound" ];then
        ____
    fi
    if [ -z "$path" ];then
        path=rcm/rcm-${extension}.sh
    fi
    Rcm_parse_url "$url"
    if [[ "$PHP_URL_HOST" == github.com ]];then
        github_owner_repo=$(cut -d/ -f 1,2 <<< $PHP_URL_PATH)
        Rcm_github_release install rcm-${extension} $github_owner_repo $path
        # Jika berhasil, maka simpan url.
        local table=$HOME/.config/rcm/rcm.table.extension
        mkdir -p $HOME/.config/rcm
        echo "$extension" "$url" "$path" >> "$table"
    else
        error Only supports URLs from Github.; x
    fi
    if ! command -v "$shell_script" > /dev/null;then
        error Command '`'$shell_script'`' not found, unable to auto download.; x
    fi
}
Rcm_get() {
    local url="$1"
    e Memulai download.
    if [ -n "$save_as" ];then
        local filename="$save_as"
    else
        Rcm_parse_url "$url"
        filename=$(basename "$PHP_URL_PATH")
    fi
    code wget '"'"$url"'"' -O '"'"$BINARY_DIRECTORY/$filename"'"'
    wget -q "$url" -O "$BINARY_DIRECTORY/$filename"
    fileMustExists "$BINARY_DIRECTORY/$filename"
    if [ ! -s "$BINARY_DIRECTORY/$filename" ];then
        __; magenta rm "$BINARY_DIRECTORY/$filename"; _.
        rm "$BINARY_DIRECTORY/$filename"
        __; red HTTP Response: 404 Not Found; x
    fi
    code chmod a+x "$BINARY_DIRECTORY/$filename"
    chmod a+x "$BINARY_DIRECTORY/$filename"
}

# Title.
title rcm
____

# Prompt.
if [ -z "$fast" ];then
    if [[ $command =~ ^rcm ]];then
        _ ''; yellow It is highly recommended that you use; _, ' ' ; magenta --fast; _, ' ' ; yellow option.; _.
        sleepExtended 2
        ____
    fi
fi

# Execute command.
if [ $command == history ];then
    directory=$HOME/.cache/rcm
    if [ ! -d "$directory" ];then
        exit 0
    fi
    cd "$directory"
    if [ -n "$delete_all" ];then
        rm *.bak 2>/dev/null
        rm *.history 2>/dev/null
        e All history deleted.
    elif [ "${#delete[@]}" -gt 0 ];then
        for each in "${delete[@]}";do
            if [ -f rcm."$each".history ];then
                rm rcm."$each".history
            fi
            if [ -f rcm."$each".bak ];then
                rm rcm."$each".bak
            fi
            e History "$each" deleted.
        done
    else
        ls *.history 2>/dev/null | sed -E 's,^rcm\.(.*)\.history$,\1,' | while read line; do
            yellow $line; _.
            if [ -f $line ];then
                contents="$(cat $line)"
                code "$contents"
                ____
            elif [ -f rcm.$line.history ];then
                contents="$(cat rcm.${line}.history)"
                code "$contents"
                ____
            fi
        done
    fi
    exit 0
fi

# Requirement, validate, and populate value.
chapter Dump variable.
delay=.5; [ -n "$fast" ] && unset delay
__FILE__=$(resolve_relative_path "$0")
__DIR__=$(dirname "$__FILE__")
BINARY_DIRECTORY=${BINARY_DIRECTORY:=$__DIR__}
code 'BINARY_DIRECTORY="'$BINARY_DIRECTORY'"'
rcm_version=`printVersion`
____

case $command in
    get)
        Rcm_get "${@}"; x;;
    install)
        Rcm_install "${@}"; x;;
    update)
        Rcm_update "${@}"; x;;
    self-update|selfupdate)
        Rcm_github_release "${@}"; x;;
esac

if [ $command == list ];then
    # git ls-files | grep -E '^.+/rcm.+\.sh$' | cut -d/ -f2 | sed -e s,^rcm-,, -e s,\.sh$,,
    command_list=$(Rcm_list)
    history_storage=$HOME'/.cache/rcm/rcm.history'
    save_history=1
    history_value=

    e Execute the command.
    if [ -f "$history_storage" ];then
        history_value=$(tail -9 "$history_storage")
        printHistoryDialog
    fi
    ____

    if [ -z "$value" ];then
        e The contents of list commands will be open.
        _; _.
        e Guide to navigate the contents:
        __; _, Press ; _, ' ['; yellow space; _, '] '; _, key for next page.; _.
        __; _, Press ; _, ' ['; yellow Page Up; _, '] '; _, for previous page.; _.
        __; _, Press ; _, ' ['; yellow Page Down; _, '] '; _, for next page.; _.
        __; _, Press ; _, ' ['; yellow /; _, '] '; _, to find string, then; _, ' ['; yellow n; _, '] '; _, to find next and; _, ' ['; yellow p; _, '] ';_, to find previous.; _.
        __; _, Press ; _, ' ['; yellow q; _, '] '; _, to quit from contents.; _.
        _; _.
        e After quit, you should select one command to execute.
        _; _.
        e Please press Ctrl+C to open the contents immediately.

        trap immediately SIGINT
        sleepExtended 30
        trap x SIGINT

        printf "\r\033[K" >&2
        echo "$command_list" | less -N -X
    fi

    printDialogSecondary=
    until [ -n "$value" ];do
        if [ -n "$printDialogSecondary" ];then
            printDialogSecondary=
            e Press the yellow key to select.;
            _; _.
            __; _, '['; yellow Esc; _, ']'; _, ' '; yellow Q; _, 'uit.'; _.
            __; _, '['; yellow Backspace; _, ']'; _, ' Show all commands.'; _.
            __; _, '['; yellow Enter; _, ']'; _, ' Type the line number of command to select.'; _.
            _; _.
            while true; do
                _ ''; read -rsn 1 -p "Select: " char
                if [ -z "$char" ];then
                    printf "\r\033[K" >&2
                    break
                fi
                case $char in
                    $'\33') echo "q"; exit ;;
                    q|Q) echo "$char"; exit ;;
                    $'\177')
                        printf "\r\033[K" >&2
                        echo "$command_list" | less -N -X
                        break
                        ;;
                    *) echo
                esac
            done
        fi
        ____

        # _; read -p " Number of command to select: " number
        _; read -p " Type the line number or leave blank to skip:  " number
        ____

        if [ -z "$number" ];then
            _ The line number of command is skipped. The command is not define yet.; _.
        elif [[ "$number" =~ ^[0-9]+$ ]];then
            value=$(sed -n ${number}p <<< "$command_list")
            if [ -z "$value" ];then
                error The number is out of range.; _.
            fi
        else
            error Input is not valid.; _.
        fi
        printDialogSecondary=1
    done

    _ Command' '; magenta $value; _, ' 'will be executed.; _.
    command="rcm-${value}"
    ____

    if [ -n "$value" ];then
        if [ -f "$history_storage" ];then
            if grep -q -- "^${command}$" "$history_storage";then
                save_history=
            fi
        fi
    fi
    if [ -n "$save_history" ];then
        mkdir -p $(dirname "$history_storage")
        echo "$value" >> "$history_storage"
    fi
fi

if [ -z "$root_sure" ];then
    chapter Mengecek akses root.
    if [[ "$EUID" -ne 0 ]]; then
        error This script needs to be run with superuser privileges.; x
    else
        __ Privileges.
    fi
    ____
fi

if [ -z "$binary_directory_exists_sure" ];then
    chapter Mempersiapkan directory binary.
    __; magenta BINARY_DIRECTORY=$BINARY_DIRECTORY; _.
    notfound=
    if [ -d "$BINARY_DIRECTORY" ];then
        __ Direktori '`'$BINARY_DIRECTORY'`' ditemukan.
    else
        __ Direktori '`'$BINARY_DIRECTORY'`' tidak ditemukan.
        notfound=1
    fi
    ____

    if [ -n "$notfound" ];then
        chapter Membuat directory.
        mkdir -p "$BINARY_DIRECTORY"
        if [ -d "$BINARY_DIRECTORY" ];then
            __; green Direktori '`'$BINARY_DIRECTORY'`' ditemukan.; _.
            else
            __; red Direktori '`'$BINARY_DIRECTORY'`' tidak ditemukan.; x
        fi
        ____
    fi
fi

PATH="${BINARY_DIRECTORY}:${PATH}"

Rcm_resolve_dependencies $command

if [ -z "$non_interactive" ];then
    argument_prepopulate=()
    if [ $# -gt 0 ];then
        while [[ $# -gt 0 ]]; do
            if [[ "$1" =~ ^-- ]];then
                if [[ "$2" =~ ^-- ]];then
                    argument_prepopulate+=("$1");
                elif [[ ! $2 == "" && ! $2 =~ ^-[^-] ]];then
                    argument_prepopulate+=("$1"="$2");
                    shift
                else
                    argument_prepopulate+=("$1");
                fi
            else
                argument_prepopulate+=("$1");
            fi
            shift
        done
    fi
    backup_storage=$HOME'/.cache/rcm/rcm.'$command'.bak'
    history_storage=$HOME'/.cache/rcm/rcm.'$command'.history'
    Rcm_prompt $command
    if [[ "${#argument_pass[@]}" -gt 0 ]];then
        set -- "${argument_pass[@]}"
        unset argument_pass
    fi
    [ -f "$backup_storage" ] && rm "$backup_storage"
fi

command -v "$command" >/dev/null || { red "Unable to proceed, $command command not found."; x; }

chapter Execute:
[ -n "$fast" ] && isfast=' --fast' || isfast=''
[ -n "$non_interactive" ] && isnoninteractive=' --non-interactive' || isnoninteractive=''
code ${command}${isfast}${isnoninteractive} "$@"
____

if [ -z "$fast" ];then
    _ ''; yellow It is highly recommended that you use; _, ' ' ; magenta --fast; _, ' ' ; yellow option.; _.
    sleepExtended 2
    ____
fi

chapter Timer Start.
e Begin: $(date +%Y%m%d-%H%M%S)
Rcm_BEGIN=$SECONDS
____

INDENT+="    " BINARY_DIRECTORY="$BINARY_DIRECTORY" $command $isfast $isnoninteractive --root-sure "$@"

chapter Timer Finish.
e End: $(date +%Y%m%d-%H%M%S)
Rcm_END=$SECONDS
duration=$(( Rcm_END - Rcm_BEGIN ))
hours=$((duration / 3600)); minutes=$(( (duration % 3600) / 60 )); seconds=$(( (duration % 3600) % 60 ));
runtime=`printf "%02d:%02d:%02d" $hours $minutes $seconds`
_ Duration: $runtime; if [ $duration -gt 60 ];then _, " (${duration} seconds)"; fi; _, '.'; _.
____

exit 0

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --with-end-options-specific-operand \
# --with-end-options-double-dash \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# --root-sure
# --binary-directory-exists-sure
# --non-interactive
# )
# VALUE=(
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# OPERAND=(
# install
# update
# get
# history
# selfupdate
# self-update
# )
# EOF
# clear

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --without-end-options-double-dash \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --rollback
# )
# VALUE=(
# --url
# --path
# )
# EOF
# clear

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --delete-all
# --fast
# )
# MULTIVALUE=(
# --delete
# )
# EOF
# clear

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --without-end-options-double-dash \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# )
# VALUE=(
# --url
# --path
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --without-end-options-double-dash \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# )
# VALUE=(
# --save-as
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear
