#!/bin/bash

# Parse arguments. Generated by parse-options.sh
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --binary-directory-exists-sure) binary_directory_exists_sure=1; shift ;;
        --fast) fast=1; shift ;;
        --root-sure) root_sure=1; shift ;;
        --) shift
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        --[^-]*) shift ;;
        update)
            while [[ $# -gt 0 ]]; do
                case "$1" in
                    *) _new_arguments+=("$1"); shift ;;
                esac
            done
            ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Command.
command="$1"; shift
if [ -n "$command" ];then
    case "$command" in
        update) ;;
        rcm-*.sh) ;;
        *) echo -e "\e[91m""Command ${command} is unknown.""\e[39m"; exit 1
    esac
else
    command=list # internal only.
fi

if [ "$command" == 'update' ];then
    # Parse arguments for subcommand self-update.
    # Generated by parse-options.sh
    _new_arguments=()
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --fast) fast=1; shift ;;
            --rollback) rollback=1; shift ;;
            --) shift
                while [[ $# -gt 0 ]]; do
                    case "$1" in
                        *) _new_arguments+=("$1"); shift ;;
                    esac
                done
                ;;
            --[^-]*) shift ;;
            *) _new_arguments+=("$1"); shift ;;
        esac
    done
    set -- "${_new_arguments[@]}"
    unset _new_arguments
fi

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo "#" "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#" "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "#" '    ' >&2; [ -n "$1" ] && echo "$@" >&2 || echo -n  >&2; }
____() { echo >&2; [ -n "$delay" ] && sleep "$delay"; }

# Functions.
printVersion() {
    echo '0.4.1'
}
printHelp() {
    title Rapid Construct Massive
    _ 'Variation '; yellow Default; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << 'EOF'
Usage: rcm.sh
       rcm.sh [command]

Options:

Global Options:
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.
   --root-sure
        Bypass root checking.

Environment Variables:
   BINARY_DIRECTORY
        Default to $__DIR__
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v "${line}" >/dev/null || { echo -e "\e[91m""Unable to proceed, ${line} command not found." "\e[39m"; exit 1; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^$/p' | sed 's/^ *//g'`

# Functions.
resolve_relative_path() {
    if [ -d "$1" ];then
        cd "$1" || return 1
        pwd
    elif [ -e "$1" ];then
        if [ ! "${1%/*}" = "$1" ]; then
            cd "${1%/*}" || return 1
        fi
        echo "$(pwd)/${1##*/}"
    else
        return 1
    fi
}
fileMustExists() {
    # global used:
    # global modified:
    # function used: __, success, error, x
    if [ -f "$1" ];then
        __; green File '`'$(basename "$1")'`' ditemukan.; _.
    else
        __; red File '`'$(basename "$1")'`' tidak ditemukan.; x
    fi
}
userInputBooleanDefaultNo() {
    __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow N; _, 'o and skip.'; _.
    __;  _, '['; yellow Y; _, ']'; _, ' '; yellow Y; _, 'es and continue.'; _.
    boolean=
    while true; do
        __; read -rsn 1 -p "Select: " char
        if [ -z "$char" ];then
            char=n
        fi
        case $char in
            y|Y) echo "$char"; boolean=1; break;;
            n|N) echo "$char"; break ;;
            *) echo
        esac
    done
}
userInputBooleanDefaultYes() {
    __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow Y; _, 'es and continue.'; _.
    __;  _, '['; yellow Esc; _, ']'; _, ' '; yellow N; _, 'o and skip.'; _.
    boolean=
    while true; do
        __; read -rsn 1 -p "Select: " char
        if [ -z "$char" ];then
            char=y
        fi
        case $char in
            y|Y) echo "$char"; boolean=1; break;;
            n|N) echo "$char"; break ;;
            $'\33') echo "n"; break ;;
            *) echo
        esac
    done
}
printBackupDialog() {
    __; _, Restore the value:' '; yellow "${backup_value}"; _, '. '; _, Would you like to use that value?; _.
    userInputBooleanDefaultYes
    if [ -n "$boolean" ];then
        __; _, Value; _, ' '; yellow "$backup_value"; _, ' ';  _, used.; _.
        value="$backup_value";
    fi
}
printHistoryDialog() {
    local count_max=$(wc -l <<< "$history_value")
    if [ $count_max -gt 9 ];then
        count_max=9
    fi
    unset count
    declare -i count
    count=0
    __ There are values available from history. Press the yellow key to select.
    while read opt; do
        count+=1
        __; _, '['; yellow $count; _, ']'; _, ' '; _, "$opt"; _.
    done <<< "$history_value"
    __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow S; _, 'kip and continue.'; _.
    while true; do
        __; read -rsn 1 -p "Select: " char;
        if [ -z "$char" ];then
            char=s
        fi
        case $char in
            s|S) echo "$char"; break ;;
            [1-$count_max])
                echo "$char"
                value=$(sed -n ${char}p <<< "$history_value")
                __; _, Value; _, ' '; yellow "$value"; _, ' ';  _, selected.; _.
                save_history=
                break ;;
            *) echo
        esac
    done
}
printSelectDialog() {
    local prefix="$1"
    local source=("${!2}")
    local what="$3"
    local first=1 e reference_key
    if [ -z "$what" ];then
        what=value
        if [ "${#source[@]}" -gt 1 ];then
            what=values
        fi
    fi
    value=
    if [ -z "$prefix" ];then
        prefix=`_ ''`
    fi
    _, "$prefix"; _, Available $what:; for e in "${source[@]}"; do
        if [ -n "$first" ];then first=; else _, ','; fi
        _, ' '; yellow "$e"
    done; _, '.'; _.
    while true; do
        __; read -p "Type the value: " value
        if [ -n "$value" ];then
            ArraySearch "$value" source[@]
            reference_key="$_return"; unset _return; # Clear.
            if [ -n "$reference_key" ];then
                break
            fi
        else
            if [ -z "$is_required" ];then
                break
            fi
        fi
    done
}
printSelectOtherDialog() {
    local prefix="$1"
    local source=("${!2}")
    local what="$3"
    local first=1 e reference_key
    if [ -z "$what" ];then
        what=value
        if [ "${#source[@]}" -gt 1 ];then
            what=values
        fi
    fi
    count_max="${#source[@]}"
    if [ $count_max -gt 9 ];then
        count_max=9
    fi
    unset count
    declare -i count
    count=0
    _, There are values available. Press the yellow key to select.; _.
    for ((i = 0 ; i < $count_max ; i++)); do
      count+=1
      __; _, '['; yellow $count; _, ']'; _, ' '; _, "${source[$i]}"; _.
    done
    __;  _, '['; yellow Enter; _, ']'; _, ' '; yellow S; _, 'kip and continue.'; _.
    while true; do
        __; read -rsn 1 -p "Select: " char;
        if [ -z "$char" ];then
            char=s
        fi
        case $char in
            s|S) echo "$char"; break ;;
            [1-$count_max])
                echo "$char"
                i=$((char - 1))
                value="${source[$i]}"
                __; _, Value; _, ' '; yellow "$value"; _, ' ';  _, selected.; _.
                break ;;
            *) echo
        esac
    done
    if [ -z "$value" ];then
        __; read -p "Type the value: " value
    fi
}
ArraySearch() {
    local index match="$1"
    local source=("${!2}")
    for index in "${!source[@]}"; do
       if [[ "${source[$index]}" == "${match}" ]]; then
           _return=$index; return 0
       fi
    done
    return 1
}
ArrayDiff() {
    # Computes the difference of arrays.
    #
    # Globals:
    #   Modified: _return
    #
    # Arguments:
    #   1 = Parameter of the array to compare from.
    #   2 = Parameter of the array to compare against.
    #
    # Returns:
    #   None
    #
    # Example:
    #   ```
    #   my=("cherry" "manggo" "blackberry" "manggo" "blackberry")
    #   yours=("cherry" "blackberry")
    #   ArrayDiff my[@] yours[@]
    #   # Get result in variable `$_return`.
    #   # _return=("manggo" "manggo")
    #   ```
    local e
    local source=("${!1}")
    local reference=("${!2}")
    _return=()
    # inArray is alternative of ArraySearch.
    inArray () {
        local e match="$1"
        shift
        for e; do [[ "$e" == "$match" ]] && return 0; done
        return 1
    }
    if [[ "${#reference[@]}" -gt 0 ]];then
        for e in "${source[@]}";do
            if ! inArray "$e" "${reference[@]}";then
                _return+=("$e")
            fi
        done
    else
        _return=("${source[@]}")
    fi
}
ArrayUnique() {
    # Removes duplicate values from an array.
    #
    # Globals:
    #   Modified: _return
    #
    # Arguments:
    #   1 = Parameter of the input array.
    #
    # Returns:
    #   None
    #
    # Example:
    #   ```
    #   my=("cherry" "manggo" "blackberry" "manggo" "blackberry")
    #   ArrayUnique my[@]
    #   # Get result in variable `$_return`.
    #   # _return=("cherry" "manggo" "blackberry")
    #   ```
    local e source=("${!1}")
    # inArray is alternative of ArraySearch.
    inArray () {
        local e match="$1"
        shift
        for e; do [[ "$e" == "$match" ]] && return 0; done
        return 1
    }
    _return=()
    for e in "${source[@]}";do
        if ! inArray "$e" "${_return[@]}";then
            _return+=("$e")
        fi
    done
}
Rcm_download() {
    commands_required=("$1")
    PATH="${BINARY_DIRECTORY}:${PATH}"
    commands_exists=()
    commands_downloaded=()
    table_downloads=
    until [[ ${#commands_required[@]} -eq 0 ]];do
        _commands_required=()
        chapter Requires command.
        for each in "${commands_required[@]}"; do
            _ Requires command: "$each"
            if command -v "$each" > /dev/null;then
                _, ' [FOUND].'; _.
                # __ Command "$each" ditemukan.
            else
                _, ' [NOTFOUND].'; _.
                if [[ -f "$BINARY_DIRECTORY/$each" && ! -s "$BINARY_DIRECTORY/$each" ]];then
                    __ Empty file detected.
                    __; magenta rm "$BINARY_DIRECTORY/$each"; _.
                    rm "$BINARY_DIRECTORY/$each"
                fi
                if [ ! -f "$BINARY_DIRECTORY/$each" ];then
                    url=
                    # Command dengan prefix rcm, kita anggap dari repository `ijortengab/rcm`.
                    if [[ "$each" =~ ^rcm- ]];then
                        url=https://github.com/ijortengab/rcm/raw/master/$(cut -d- -f2 <<< "$each")/"$each"
                    elif [[ "$each" =~ \.sh$ ]];then
                        url=$(grep -F '['$each']' <<< "$table_downloads" | tail -1 | sed -E 's/.*\((.*)\).*/\1/')
                    fi
                    if [ -n "$url" ];then
                        __ Memulai download.
                        __; magenta wget "$url"; _.
                        wget -q "$url" -O "$BINARY_DIRECTORY/$each"
                        fileMustExists "$BINARY_DIRECTORY/$each"
                        if [ ! -s "$BINARY_DIRECTORY/$each" ];then
                            __; magenta rm "$BINARY_DIRECTORY/$each"; _.
                            rm "$BINARY_DIRECTORY/$each"
                            __; red HTTP Response: 404 Not Found; x
                        fi
                        __; magenta chmod a+x "$BINARY_DIRECTORY/$each"; _.
                        chmod a+x "$BINARY_DIRECTORY/$each"
                        commands_downloaded+=("$each")
                    fi
                elif [[ ! -x "$BINARY_DIRECTORY/$each" ]];then
                    __; magenta chmod a+x "$BINARY_DIRECTORY/$each"; _.
                    chmod a+x "$BINARY_DIRECTORY/$each"
                fi
            fi
            commands_exists+=("$each")
            _help=$("$each" --help 2>/dev/null)
            # Hanya mendownload dependency dengan akhiran .sh (shell script).
            _dependency=$(echo "$_help" | sed -n '/^Dependency:/,$p' | sed -n '2,/^$/p' | sed 's/^ *//g' | grep \.sh$)
            _download=$(echo "$_help" | sed -n '/^Download:/,$p' | sed -n '2,/^$/p' | sed 's/^ *//g')
            if [ -n "$_dependency" ];then
                [ -n "$table_downloads" ] && table_downloads+=$'\n'
                table_downloads+="$_download"
            fi
            unset _download
            unset _help
            if [ -n "$_dependency" ];then
                _dependency=($_dependency)
                ArrayDiff _dependency[@] commands_exists[@]
                if [[ ${#_return[@]} -gt 0 ]];then
                    _commands_required+=("${_return[@]}")
                    unset _return
                fi
                unset _dependency
            fi
        done
        ____

        chapter Dump variable.
        ArrayUnique _commands_required[@]
        commands_required=("${_return[@]}")
        unset _return
        unset _commands_required
        code 'commands_required=('"${commands_required[@]}"')'
        ____
    done
}
Rcm_prompt() {
    local command="$1"
    local chapter_printed=
    argument_pass=()
    available_subcommands=()
    _available_subcommands=`$command --help 2>/dev/null | sed -n -E 's/^Available commands?: ([^\.]+)\.$/\1/p' | head -1`
    if [ -n "$_available_subcommands" ];then
        available_subcommands=(`echo $_available_subcommands | tr ',' ' '`)
    fi
    if [ "${#available_subcommands[@]}" -gt 0 ];then
        chapter Prepare argument for command '`'$command'`'.
        chapter_printed=1
        what=subcommand
        if [ "${#available_subcommands[@]}" -gt 1 ];then
            what=subcommands
        fi
        printSelectDialog '' available_subcommands[@] "$what"
        if [ -n "$value" ];then
            argument_pass+=("${value}")
        fi
    fi

    options=`$command --help 2>/dev/null | sed -n '/^Options[:\.]$/,$p' | sed -n '2,/^$/p'`
    if [ -n "$options" ];then
        if [ -z "$chapter_printed" ];then
            chapter Prepare argument for command '`'$command'`'.
        fi
        until [[ -z "$options" ]];do
            parameter=`sed -n 1p <<< "$options" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'`
            is_required=
            is_flag=
            value_addon=
            is_flagvalue=
            save_history=1
            if [[ "${parameter:(-1):1}" == '*' ]];then
                is_required=1
                parameter="${parameter::-1}"
                parameter=`xargs <<< "$parameter"`
            elif [[ "${parameter:(-1):1}" == '^' ]];then
                is_flag=1
                parameter="${parameter::-1}"
                parameter=`xargs <<< "$parameter"`
            fi
            if [[ "$parameter" == '--' ]];then
                is_required=
                is_flag=
                value_addon=multivalue
            fi
            label=`sed -n 2p <<< "$options" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'`
            if grep -q -i -E '(^|\.\s)Multivalue\.' <<< "$label";then
                value_addon=multivalue
            fi
            if grep -q -i -E '(^|\.\s)Can have value\.' <<< "$label";then
                value_addon=canhavevalue
            fi
            unset count
            declare -i count
            count=3
            placeholders=
            while true; do
                below=`sed -n ${count}p <<< "$options" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//'`
                if grep -q '^--' <<< "$below";then
                    break
                fi
                if [ -z "$below" ];then
                    break
                fi
                if [ -n "$placeholders" ];then
                    placeholders+=$'\n'
                fi
                placeholders+="$below"
                count+=1
            done
            options=`sed -n ${count}',$p' <<< "$options"`
            value=
            backup_value=
            if [ -f "$backup_storage" ];then
                backup_value=$(grep -- "^${parameter}=.*$" "$backup_storage" | tail -1 | sed -E 's|'"^${parameter}=(.*)$"'|\1|')
            fi
            history_value=
            if [ -f "$history_storage" ];then
                history_value=$(grep -- "^${parameter}=.*$" "$history_storage" | tail -9 | sed -E 's|'"^${parameter}=(.*)$"'|\1|')
            fi
            available_values=()
            _available_values=`echo "$label" | grep -o -E 'Available values?:[^\.]+\.'| sed -n -E 's/^Available values?: ([^\.]+)\.$/\1/p'`
            or_other=
            if [ -n "$_available_values" ];then
                if grep -i -q -E 'or others?' <<< "$_available_values";then
                    or_other=1
                    _available_values=`echo "$_available_values" | sed -E 's/or others?$//'`
                fi
            fi
            if [ -n "$placeholders" ];then
                while read line; do
                    find=$(echo ${line} | cut -d: -f1 | xargs)
                    replace=$(echo ${line} | cut -d: -f2 | xargs)
                    label="${label/"$find"/"$replace"}"
                    if [ -n "$_available_values" ];then
                        _available_values="${_available_values/"$find"/"$replace"}"
                    fi
                done <<< "$placeholders"
            fi
            if [ -n "$_available_values" ];then
                available_values=(`echo $_available_values | tr ',' ' '`)
            fi
            if [ -n "$is_flag" ];then
                _ 'Argument '; magenta ${parameter};_, ' is '; _, optional; _, ". ${label}"; _.
                __; _, Add this argument?; _.
                userInputBooleanDefaultNo
                if [ -n "$boolean" ]; then
                    if [[ "$value_addon" == 'canhavevalue' ]];then
                        __; _, Do you want fill with value?; _.
                        userInputBooleanDefaultNo
                        if [ -n "$boolean" ]; then
                            if [ -n "$backup_value" ];then
                                printBackupDialog
                            fi
                            if [ -z "$value" ];then
                                if [ -n "$history_value" ];then
                                    printHistoryDialog
                                fi
                            fi
                            if [ -z "$value" ];then
                                if [ "${#available_values[@]}" -gt 0 ];then
                                    printSelectDialog "`__`" available_values[@]
                                fi
                            fi
                            until [[ -n "$value" ]];do
                                __; read -p "Type the value: " value
                            done
                            argument_pass+=("${parameter}=${value}")
                        else
                            argument_pass+=("${parameter}")
                        fi
                    else
                        argument_pass+=("${parameter}")
                    fi
                fi
            elif [[ "$parameter" == '--' ]];then
                _ 'Argument '; magenta ${parameter};_, ' is '; _, optional; _, ". ${label}"; _.
                __; _, Add value?; _.
                userInputBooleanDefaultNo
                if [ -n "$boolean" ]; then
                    if [ -n "$history_value" ];then
                        printHistoryDialog
                    fi
                    if [ -z "$value" ];then
                        __; read -p "Type the value: " value
                    fi
                    if [ -n "$value" ];then
                        argument_pass+=("${parameter} ${value}")
                    fi
                fi
            else
                if [ -n "$is_required" ];then
                    _ 'Argument '; magenta ${parameter};_, ' is '; yellow required; _, ". ${label}"; _.
                else
                    _ 'Argument '; magenta ${parameter};_, ' is '; _, optional; _, ". ${label}"; _.
                fi
                if [ -n "$backup_value" ];then
                    printBackupDialog
                fi
                if [ -z "$value" ];then
                    if [ -n "$history_value" ];then
                        printHistoryDialog
                    fi
                fi
                if [ -z "$value" ];then
                    if [ "${#available_values[@]}" -gt 0 ];then
                        if [ -n "$or_other" ];then
                            printSelectOtherDialog "`__`" available_values[@]
                        else
                            printSelectDialog "`__`" available_values[@]
                        fi
                    else
                        __; read -p "Type the value: " value
                    fi
                fi
                if [ -n "$is_required" ];then
                    until [[ -n "$value" ]];do
                        __; read -p "Type the value: " value
                    done
                fi
                if [ -n "$value" ];then
                    argument_pass+=("${parameter}=${value}")
                fi
            fi
            # Backup to text file.
            value=$(echo "$value" | sed -E 's/[^a-z0-9A-Z_.,-]//g' | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
            if [ -n "$value" ];then
                mkdir -p $(dirname "$backup_storage");
                echo "${parameter}=${value}" >> "$backup_storage"
                if [ -f "$history_storage" ];then
                    if grep -q -- "^${parameter}=${value}\$" "$history_storage";then
                        save_history=
                    fi
                fi
                if [ -n "$save_history" ];then
                    mkdir -p $(dirname "$history_storage");
                    echo "${parameter}=${value}" >> "$history_storage"
                fi
            fi
            if [[ "$value_addon" == 'multivalue' ]];then
                again=1
                until [ -z "$again" ]; do
                    if [ -n "$is_flag" ];then
                        __ Add this argument again?
                        userInputBooleanDefaultNo
                    else
                        __ Add other value?
                        userInputBooleanDefaultNo
                    fi
                    if [ -n "$boolean" ];then
                        if [ -n "$is_flag" ];then
                            argument_pass+=("${parameter}")
                        elif [[ "$parameter" == '--' ]];then
                            if [ -n "$history_value" ];then
                                printHistoryDialog
                            fi
                            if [ -z "$value" ];then
                                __; read -p "Type the value: " value
                            fi
                            if [ -n "$value" ];then
                                argument_pass+=("${value}")
                            fi
                        else
                            __; read -p "Type the value: " value
                            [ -n "$value" ] && argument_pass+=("${parameter}=${value}")
                        fi
                        # Backup to text file.
                        value=$(echo "$value" | sed -E 's/[^a-z0-9A-Z_.,-]//g' | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')
                        if [ -n "$value" ];then
                            mkdir -p $(dirname "$backup_storage");
                            echo "${parameter}=${value}" >> "$backup_storage"
                            if [ -f "$history_storage" ];then
                                if grep -q -- "^${parameter}=${value}\$" "$history_storage";then
                                    save_history=
                                fi
                            fi
                            if [ -n "$save_history" ];then
                                mkdir -p $(dirname "$history_storage");
                                echo "${parameter}=${value}" >> "$history_storage"
                            fi
                        fi
                    else
                        again=
                    fi
                done
            fi
        done
        ____
    fi
}
sleepExtended() {
    local countdown=$1
    countdown=$((countdown - 1))
    while [ "$countdown" -ge 0 ]; do
        printf "\r\033[K" >&2
        printf %"$countdown"s | tr " " "." >&2
        printf "\r"
        countdown=$((countdown - 1))
        sleep .9
    done
}

# Title.
title rcm.sh
____

# Prompt.
if [ -z "$fast" ];then
    if [[ $command =~ ^rcm ]];then
        _ ''; yellow It is highly recommended that you use; _, ' ' ; magenta --fast; _, ' ' ; yellow option.; _.
        sleepExtended 2
        ____
    fi
fi

# Execute command.
if [ $command == update ];then
        shell_script=$1; shift
        if [ -z "$shell_script" ];then
            error "Operand <shell_script> required."; x
        fi
        github_repo=$1; shift
        if [ -z "$github_repo" ];then
            error "Operand <github_repo> required."; x
        fi
        current_version=`$shell_script --version`
        current_path=$(which $shell_script)
        current_path=$(realpath "$current_path")
        if [ -n "$rollback" ];then
            previous_path=$HOME/.cache/rcm/$github_repo/rollback/$shell_script
            if [ -f "$previous_path" ];then
                # Override now
                cp "$previous_path" "$current_path"
                old_version=$current_version
                current_version=`$shell_script --version`
                _ 'Success rollback '; magenta $shell_script; _, ' to version: '; yellow $current_version; _.
                rm $HOME/.cache/rcm/$github_repo/rollback
            else
                _ 'There are no previous version found. '; _.
            fi
            exit 0
        fi
        tag_name=$(wget -qO- https://api.github.com/repos/$github_repo/releases/latest | grep '^  "tag_name": ".*",$' | sed -E 's/  "tag_name": "(.*)",/\1/')
        latest_version=$(sed -E 's/v?(.*)/\1/' <<< "$tag_name")
        if [ "$current_version" == "$latest_version" ];then
            _ 'You are already using the latest available '; magenta $shell_script; _, ' version : '; yellow $latest_version; _.
            exit 0
        fi

        backup_path=$HOME/.cache/rcm/$github_repo/$current_version/$shell_script
        # e '$backup_path' "$backup_path"
        mkdir -p $(dirname "$backup_path")
        cp "$current_path" "$backup_path"
        if [ ! -f "$backup_path" ];then
            error Failed to save backup file: "$backup_path".; x
        fi
        _ 'Downloading version: '; yellow $latest_version; _.
        url='https://api.github.com/repos/'$github_repo'/tarball/'$tag_name
        tempdir=$(mktemp -d)
        cd "$tempdir"
        wget -q -O "${tag_name}.tar.gz" "$url"
        if [ ! -f "${tag_name}.tar.gz" ];then
            error Failed to download file: "${tag_name}.tar.gz".
            rm -rf "$tempdir"
            x
        fi
        tar xfz "${tag_name}.tar.gz"
        found_file=$(find -mindepth 2 -type f -name "$shell_script")
        if [ -z "$found_file" ];then
            error Failed to extract file: "$shell_script".
            rm -rf "$tempdir"
            x
        fi
        latest_path=$HOME/.cache/rcm/$github_repo/$latest_version/$shell_script
        mkdir -p $(dirname "$latest_path")
        cp "$found_file" "$latest_path"

        # Buat rollback.
        if [ ! -d $HOME/.cache/rcm/$github_repo/rollback ];then
            cd $HOME/.cache/rcm/$github_repo
            ln -sf $current_version rollback
        fi

        # Override now
        cp "$latest_path" "$current_path"

        # Cleaning
        rm -rf "$tempdir"
        old_version=$current_version
        current_version=`$shell_script --version`
        _ 'Success update '; magenta $shell_script; _, ' to version: '; yellow $current_version; _.
        e To rollback version $old_version, execute the latest command with --rollback options.
        exit 0
fi
if [ $command == list ];then
    # git ls-files | grep -E '^.+/rcm.+\.sh$' | cut -d/ -f2
    command_list=$(cat << 'EOF'
rcm-amavis-setup-ispconfig.sh
rcm-certbot-autoinstaller.sh
rcm-certbot-digitalocean-autoinstaller.sh
rcm-certbot-obtain-certificates.sh
rcm-certbot-setup-nginx.sh
rcm-composer-autoinstaller.sh
rcm-cron-setup-wsl-autorun-crond.sh
rcm-cron-setup-wsl-autorun-sshd.sh
rcm-cron-setup-wsl-port-forwarding.sh
rcm-debian-11-setup-basic.sh
rcm-debian-12-setup-basic.sh
rcm-digitalocean-api-manage-domain-record.sh
rcm-digitalocean-api-manage-domain.sh
rcm-drupal-autoinstaller-nginx.sh
rcm-drupal-setup-drush-alias.sh
rcm-drupal-setup-dump-variables.sh
rcm-drupal-setup-variation1.sh
rcm-drupal-setup-variation2.sh
rcm-drupal-setup-variation3.sh
rcm-drupal-setup-variation4.sh
rcm-drupal-setup-variation5.sh
rcm-drupal-setup-variation6.sh
rcm-drupal-setup-variation7.sh
rcm-drupal-setup-variation8.sh
rcm-drupal-setup-variation9.sh
rcm-drupal-setup-wrapper-nginx-setup-drupal.sh
rcm-ispconfig-autoinstaller-nginx.sh
rcm-ispconfig-control-manage-domain.sh
rcm-ispconfig-control-manage-email-alias.sh
rcm-ispconfig-control-manage-email-mailbox.sh
rcm-ispconfig-setup-dump-variables.sh
rcm-ispconfig-setup-internal-command.sh
rcm-ispconfig-setup-smtpd-certificate.sh
rcm-ispconfig-setup-variation1.sh
rcm-ispconfig-setup-variation2.sh
rcm-ispconfig-setup-variation3.sh
rcm-ispconfig-setup-variation4.sh
rcm-ispconfig-setup-variation5.sh
rcm-ispconfig-setup-wrapper-certbot-setup-nginx.sh
rcm-ispconfig-setup-wrapper-digitalocean.sh
rcm-ispconfig-setup-wrapper-nginx-setup-php.sh
rcm-mariadb-autoinstaller.sh
rcm-mariadb-setup-database.sh
rcm-mariadb-setup-ispconfig.sh
rcm-nginx-autoinstaller.sh
rcm-nginx-setup-drupal.sh
rcm-nginx-setup-front-controller-php.sh
rcm-nginx-setup-hello-world-php.sh
rcm-nginx-setup-hello-world-static.sh
rcm-nginx-setup-ispconfig.sh
rcm-nginx-setup-php.sh
rcm-nginx-setup-static.sh
rcm-php-autoinstaller.sh
rcm-php-setup-adjust-cli-version.sh
rcm-php-setup-drupal.sh
rcm-php-setup-ispconfig.sh
rcm-phpmyadmin-autoinstaller-nginx.sh
rcm-postfix-autoinstaller.sh
rcm-postfix-setup-ispconfig.sh
rcm-roundcube-autoinstaller-nginx.sh
rcm-roundcube-setup-ispconfig-integration.sh
rcm-ssh-setup-open-ssh-tunnel.sh
rcm-ssh-setup-sshd-listen-port.sh
rcm-ubuntu-22.04-setup-basic.sh
rcm-wsl-setup-lemp-stack.sh
EOF
    )
    e Press the yellow key to select.;
    history_storage=$HOME'/.cache/rcm/rcm.history'
    save_history=1
    if [ -f "$history_storage" ];then
        history_value=$(tail -9 "$history_storage")
        count_max=$(wc -l <<< "$history_value")
        unset count
        declare -i count
        count=0
        while read opt; do
            count+=1
            _ '['; yellow $count; _, ']'; _, ' '; _, "$opt"; _.
        done <<< "$history_value"

    fi
    _ '['; yellow Esc; _, ']'; _, ' '; yellow Q; _, 'uit.'; _.
    _ '['; yellow Enter; _, ']'; _, ' Show all commands. (Tips navigate: press space key for next page, press q to quit.)'; _.
    while true; do
        _ ''; read -rsn 1 -p "Select: " char
        if [ -z "$char" ];then
            printf "\r\033[K" >&2
            echo "$command_list" | less -N -X
            break
        fi
        case $char in
            $'\33') echo "q"; exit ;;
            q|Q) echo "$char"; exit ;;
            [1-$count_max])
                echo "$char"
                command_selected=$(sed -n ${char}p <<< "$history_value")
                save_history=
                break
                ;;
            *) echo
        esac
    done
    printDialogSecondary=
    until [ -n "$command_selected" ];do
        if [ -n "$printDialogSecondary" ];then
            printDialogSecondary=
            e Press the yellow key to select.;
            _ '['; yellow Esc; _, ']'; _, ' '; yellow Q; _, 'uit.'; _.
            _ '['; yellow Backspace; _, ']'; _, ' Show all commands.'; _.
            _ '['; yellow Enter; _, ']'; _, ' Type the number of command to select.'; _.
            while true; do
                _ ''; read -rsn 1 -p "Select: " char
                if [ -z "$char" ];then
                    printf "\r\033[K" >&2
                    break
                fi
                case $char in
                    $'\33') echo "q"; exit ;;
                    q|Q) echo "$char"; exit ;;
                    $'\177')
                        printf "\r\033[K" >&2
                        echo "$command_list" | less -N -X
                        break
                        ;;
                    *) echo
                esac
            done
        fi
        _; read -p "Number of command to select: " number
        if [ -z "$number" ];then
            error The number is required.; _.
        elif [[ "$number" =~ ^[0-9]+$ ]];then
            command_selected=$(sed -n ${number}p <<< "$command_list")
            if [ -z "$command_selected" ];then
                error The number is out of range.; _.
            fi
        else
            error Input is not valid.; _.
        fi
        printDialogSecondary=1
    done
    _ Command' '; magenta $command_selected; _, ' 'selected.; _.
    command=$command_selected
    ____

    if [ -n "$save_history" ];then
        mkdir -p $(dirname "$history_storage")
        echo "$command_selected" >> "$history_storage"
    fi
fi

# Requirement, validate, and populate value.
chapter Dump variable.
delay=.5; [ -n "$fast" ] && unset delay
__FILE__=$(resolve_relative_path "$0")
__DIR__=$(dirname "$__FILE__")
BINARY_DIRECTORY=${BINARY_DIRECTORY:=$__DIR__}
code 'BINARY_DIRECTORY="'$BINARY_DIRECTORY'"'
____

if [ -z "$root_sure" ];then
    chapter Mengecek akses root.
    if [[ "$EUID" -ne 0 ]]; then
        error This script needs to be run with superuser privileges.; x
    else
        __ Privileges.
    fi
    ____
fi

if [ -z "$binary_directory_exists_sure" ];then
    chapter Mempersiapkan directory binary.
    __; magenta BINARY_DIRECTORY=$BINARY_DIRECTORY; _.
    notfound=
    if [ -d "$BINARY_DIRECTORY" ];then
        __ Direktori '`'$BINARY_DIRECTORY'`' ditemukan.
    else
        __ Direktori '`'$BINARY_DIRECTORY'`' tidak ditemukan.
        notfound=1
    fi
    ____

    if [ -n "$notfound" ];then
        chapter Membuat directory.
        mkdir -p "$BINARY_DIRECTORY"
        if [ -d "$BINARY_DIRECTORY" ];then
            __; green Direktori '`'$BINARY_DIRECTORY'`' ditemukan.; _.
            else
            __; red Direktori '`'$BINARY_DIRECTORY'`' tidak ditemukan.; x
        fi
        ____
    fi
fi

PATH="${BINARY_DIRECTORY}:${PATH}"

Rcm_download $command

if [ $# -eq 0 ];then
    backup_storage=$HOME'/.cache/rcm/rcm.'$command'.bak'
    history_storage=$HOME'/.cache/rcm/rcm.'$command'.history'
    Rcm_prompt $command
    if [[ "${#argument_pass[@]}" -gt 0 ]];then
        set -- "${argument_pass[@]}"
        unset argument_pass
    fi
    [ -f "$backup_storage" ] && rm "$backup_storage"
fi

chapter Execute:
[ -n "$fast" ] && isfast=' --fast' || isfast=''
code ${command}${isfast} "$@"
____

if [ -z "$fast" ];then
    _ ''; yellow It is highly recommended that you use; _, ' ' ; magenta --fast; _, ' ' ; yellow option.; _.
    sleepExtended 2
    ____
fi

chapter Timer Start.
e Begin: $(date +%Y%m%d-%H%M%S)
Rcm_BEGIN=$SECONDS
____

command -v "$command" >/dev/null || { red "Unable to proceed, $command command not found."; x; }
INDENT+="    " BINARY_DIRECTORY="$BINARY_DIRECTORY" $command $isfast --root-sure "$@"

chapter Timer Finish.
e End: $(date +%Y%m%d-%H%M%S)
Rcm_END=$SECONDS
duration=$(( Rcm_END - Rcm_BEGIN ))
hours=$((duration / 3600)); minutes=$(( (duration % 3600) / 60 )); seconds=$(( (duration % 3600) % 60 ));
runtime=`printf "%02d:%02d:%02d" $hours $minutes $seconds`
_ Duration: $runtime; if [ $duration -gt 60 ];then _, " (${duration} seconds)"; fi; _, '.'; _.
____

exit 0

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --with-end-options-specific-operand \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# --root-sure
# --binary-directory-exists-sure
# )
# VALUE=(
# )
# MULTIVALUE=(
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# OPERAND=(
# update
# )
# EOF
# clear

# parse-options.sh \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --rollback
# --fast
# )
# EOF
# clear
